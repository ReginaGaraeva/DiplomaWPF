<?xml version="1.0"?>
<doc>
  <assembly>
    <name>TomsToolbox.Wpf</name>
  </assembly>
  <members>
    <member name="T:TomsToolbox.Wpf.Behaviors.MapPanBehavior">
      <summary>
            Implements pan behavior for the <see cref="T:TomsToolbox.Wpf.Controls.Map" /> control.
            </summary>
      <invariant>_panAnimation != null</invariant>
      <invariant>_storyboard != null</invariant>
    </member>
    <member name="M:TomsToolbox.Wpf.Behaviors.MapPanBehavior.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the Freezable derived class. 
            </summary>
      <returns>The new instance.</returns>
      <ensures inheritedFrom="M:System.Windows.Freezable.CreateInstanceCore" inheritedFromTypeName="Freezable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.Behaviors.MapPanBehavior.OnAttached">
      <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
      <remarks>
            Override this to hook up functionality to the AssociatedObject.
            </remarks>
    </member>
    <member name="T:TomsToolbox.Wpf.Behaviors.PopupFocusManagerBehavior">
      <summary>
            Handle focus for popups opened by toggle buttons. 
            When the popup opens, the focus is set to the first focusable control in the popup.
            When the popup closes, the focus is set back to the button.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Behaviors.PopupFocusManagerBehavior.ToggleButtonProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Behaviors.PopupFocusManagerBehavior.ToggleButton" /> dependency property.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Behaviors.PopupFocusManagerBehavior.OnAttached">
      <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
      <remarks>
            Override this to hook up functionality to the AssociatedObject.
            </remarks>
    </member>
    <member name="M:TomsToolbox.Wpf.Behaviors.PopupFocusManagerBehavior.OnDetaching">
      <summary>
            Called when the behavior is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
      <remarks>
            Override this to unhook functionality from the AssociatedObject.
            </remarks>
    </member>
    <member name="P:TomsToolbox.Wpf.Behaviors.PopupFocusManagerBehavior.ToggleButton">
      <summary>
            Gets or sets the toggle button that controls the popup.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.Behaviors.SelectGroupOnGroupHeaderClickBehavior">
      <summary>
             If attached to the root visual in the group header template of a selector control, 
             all items in the group will be selected when the group header is clicked, 
             or added to the current selection when the Ctlr-key is down. 
            
             </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Behaviors.SelectGroupOnGroupHeaderClickBehavior.OnAttached">
      <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
      <remarks>
            Override this to hook up functionality to the AssociatedObject.
            </remarks>
    </member>
    <member name="M:TomsToolbox.Wpf.Behaviors.SelectGroupOnGroupHeaderClickBehavior.OnDetaching">
      <summary>
            Called when the behavior is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
      <remarks>
            Override this to unhook functionality from the AssociatedObject.
            </remarks>
    </member>
    <member name="T:TomsToolbox.Wpf.Behaviors.SelectionRectangleBehavior">
      <summary>
            Adding selection rectangle behavior to a layer canvas. Selection is done with the right mouse button.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Behaviors.SelectionRectangleBehavior.TargetElementProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Behaviors.SelectionRectangleBehavior.TargetElement" /> dependency property.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Behaviors.SelectionRectangleBehavior.ViewportProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Behaviors.SelectionRectangleBehavior.Viewport" /> dependency property.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Behaviors.SelectionRectangleBehavior.SelectionProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Behaviors.SelectionRectangleBehavior.Selection" /> dependency property.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Behaviors.SelectionRectangleBehavior.TargetElement">
      <summary>
            Gets or sets the target element that displays the selection.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Behaviors.SelectionRectangleBehavior.Viewport">
      <summary>
            Gets or sets the view port in which the target element is displayed.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Behaviors.SelectionRectangleBehavior.Selection">
      <summary>
            Gets or sets the selection rectangle in logical coordinates.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.Behaviors.MapZoomBehavior">
      <summary>
            Implements zooming behavior for the <see cref="T:TomsToolbox.Wpf.Controls.Map" /> control.
            </summary>
      <invariant>_animation != null</invariant>
      <invariant>_storyboard != null</invariant>
    </member>
    <member name="F:TomsToolbox.Wpf.Behaviors.MapZoomBehavior.MouseWheelIncrementProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Behaviors.MapZoomBehavior.MouseWheelIncrement" /> dependency property
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Behaviors.MapZoomBehavior.OnAttached">
      <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
      <remarks>
            Override this to hook up functionality to the AssociatedObject.
            </remarks>
    </member>
    <member name="M:TomsToolbox.Wpf.Behaviors.MapZoomBehavior.ObjectInvariant">
      <summary>
            Objects the invariant.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Behaviors.MapZoomBehavior.MouseWheelIncrement">
      <summary>
            Gets or sets the number of zoom steps performed on one mouse wheel event.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.Behaviors.ZoomFontSizeOnMouseWheelBehavior">
      <summary>
            When attached to a framework element, the <see cref="P:System.Windows.Documents.TextElement.FontSize" /> property 
            will be changed upon Ctrl+MouseWheel events.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Behaviors.ZoomFontSizeOnMouseWheelBehavior.OnAttached">
      <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
      <remarks>
            Override this to hook up functionality to the AssociatedObject.
            </remarks>
    </member>
    <member name="M:TomsToolbox.Wpf.Behaviors.ZoomFontSizeOnMouseWheelBehavior.OnDetaching">
      <summary>
            Called when the behavior is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
      <remarks>
            Override this to unhook functionality from the AssociatedObject.
            </remarks>
    </member>
    <member name="T:TomsToolbox.Wpf.BindingErrorTracer">
      <summary>
            Helper class to detect binding errors during debugging.<para /> 
            All functionality is only active if a debugger is attached.<para /> 
            When a binding error occurs, the <see cref="E:TomsToolbox.Wpf.BindingErrorTracer.Error" /> event is raised. If no event handler is attached, <see cref="M:System.Diagnostics.Debug.Fail(System.String)" /> is called.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.BindingErrorTracer.IgnoredErrors">
      <summary>
            The errors to be ignored during internal error handling.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.BindingErrorTracer.Start">
      <summary>
            Hooks into <see cref="T:System.Diagnostics.PresentationTraceSources" /> to listen for binding errors.
            </summary>
    </member>
    <member name="E:TomsToolbox.Wpf.BindingErrorTracer.Error">
      <summary>
            Occurs when a binding error is detected. When an error event handler is attached, there will be no internal error handling.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.BindingErrorTracer.Listener.Write(System.String)">
      <summary>
            When overridden in a derived class, writes the specified message to the listener you create in the derived class.
            </summary>
      <param name="message">A message to write. </param>
    </member>
    <member name="M:TomsToolbox.Wpf.BindingErrorTracer.Listener.WriteLine(System.String)">
      <summary>
            When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a line terminator.
            </summary>
      <param name="message">A message to write. </param>
    </member>
    <member name="T:TomsToolbox.Wpf.CanvasAnchor">
      <summary>
            Anchors for a canvas to specify two coordinates in one single operation specifying a <see cref="T:System.Windows.Point" />.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.CanvasAnchor.GetTopLeft(System.Windows.UIElement)">
      <summary>
            Gets the elements <see cref="P:TomsToolbox.Wpf.CanvasAnchor.TopLeft" /> point in the canvas.
            </summary>
      <param name="obj">The object on which this property was set.</param>
      <returns>The point.</returns>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.CanvasAnchor.SetTopLeft(System.Windows.UIElement,System.Windows.Point)">
      <summary>
            Sets the elements <see cref="P:TomsToolbox.Wpf.CanvasAnchor.TopLeft" /> point in the canvas.
            </summary>
      <param name="obj">The object on which to set <see cref="P:System.Windows.Controls.Canvas.Top" /> and <see cref="P:System.Windows.Controls.Canvas.Left" />.</param>
      <param name="value">The point.</param>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="F:TomsToolbox.Wpf.CanvasAnchor.TopLeftProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.CanvasAnchor.TopLeft" /> attached property
            </summary>
      <AttachedPropertyComments>
        <summary>
            A helper property to assign the coordinates of a <see cref="T:System.Windows.Point" /> to the 
            <see cref="P:System.Windows.Controls.Canvas.Top" /> and <see cref="P:System.Windows.Controls.Canvas.Left" /> property in one single operation.
            </summary>
        <remarks>
            This property is only "one way", i.e. changing <see cref="P:System.Windows.Controls.Canvas.Top" /> or <see cref="P:System.Windows.Controls.Canvas.Left" /> 
            will not affect this attached property.
            </remarks>
      </AttachedPropertyComments>
    </member>
    <member name="M:TomsToolbox.Wpf.CanvasAnchor.GetTopRight(System.Windows.UIElement)">
      <summary>
            Gets the elements <see cref="P:TomsToolbox.Wpf.CanvasAnchor.TopRight" /> point in the canvas.
            </summary>
      <param name="obj">The object on which this property was set.</param>
      <returns>The point.</returns>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.CanvasAnchor.SetTopRight(System.Windows.UIElement,System.Windows.Point)">
      <summary>
            Sets the elements <see cref="P:TomsToolbox.Wpf.CanvasAnchor.TopRight" /> point in the canvas.
            </summary>
      <param name="obj">The object on which to set <see cref="P:System.Windows.Controls.Canvas.Top" /> and <see cref="P:System.Windows.Controls.Canvas.Right" />.</param>
      <param name="value">The point.</param>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="F:TomsToolbox.Wpf.CanvasAnchor.TopRightProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.CanvasAnchor.TopRight" /> attached property
            </summary>
      <AttachedPropertyComments>
        <summary>
            A helper property to assign the coordinates of a <see cref="T:System.Windows.Point" /> to the 
            <see cref="P:System.Windows.Controls.Canvas.Top" /> and <see cref="P:System.Windows.Controls.Canvas.Right" /> property in one single operation.
            </summary>
        <remarks>
            This property is only "one way", i.e. changing <see cref="P:System.Windows.Controls.Canvas.Top" /> or <see cref="P:System.Windows.Controls.Canvas.Right" /> 
            will not affect this attached property.
            </remarks>
      </AttachedPropertyComments>
    </member>
    <member name="M:TomsToolbox.Wpf.CanvasAnchor.GetBottomLeft(System.Windows.UIElement)">
      <summary>
            Gets the elements <see cref="P:TomsToolbox.Wpf.CanvasAnchor.BottomLeft" /> point in the canvas.
            </summary>
      <param name="obj">The object on which this property was set.</param>
      <returns>The point.</returns>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.CanvasAnchor.SetBottomLeft(System.Windows.UIElement,System.Windows.Point)">
      <summary>
            Sets the elements <see cref="P:TomsToolbox.Wpf.CanvasAnchor.BottomLeft" /> point in the canvas.
            </summary>
      <param name="obj">The object on which to set <see cref="P:System.Windows.Controls.Canvas.Bottom" /> and <see cref="P:System.Windows.Controls.Canvas.Left" />.</param>
      <param name="value">The point.</param>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="F:TomsToolbox.Wpf.CanvasAnchor.BottomLeftProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.CanvasAnchor.BottomLeft" /> attached property
            </summary>
      <AttachedPropertyComments>
        <summary>
            A helper property to assign the coordinates of a <see cref="T:System.Windows.Point" /> to the 
            <see cref="P:System.Windows.Controls.Canvas.Bottom" /> and <see cref="P:System.Windows.Controls.Canvas.Left" /> property in one single operation.
            </summary>
        <remarks>
            This property is only "one way", i.e. changing <see cref="P:System.Windows.Controls.Canvas.Bottom" /> or <see cref="P:System.Windows.Controls.Canvas.Left" /> 
            will not affect this attached property.
            </remarks>
      </AttachedPropertyComments>
    </member>
    <member name="M:TomsToolbox.Wpf.CanvasAnchor.GetBottomRight(System.Windows.UIElement)">
      <summary>
            Gets the elements <see cref="P:TomsToolbox.Wpf.CanvasAnchor.BottomRight" /> point in the canvas.
            </summary>
      <param name="obj">The object on which this property was set.</param>
      <returns>The point.</returns>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.CanvasAnchor.SetBottomRight(System.Windows.UIElement,System.Windows.Point)">
      <summary>
            Sets the elements <see cref="P:TomsToolbox.Wpf.CanvasAnchor.BottomRight" /> point in the canvas.
            </summary>
      <param name="obj">The object on which to set <see cref="P:System.Windows.Controls.Canvas.Bottom" /> and <see cref="P:System.Windows.Controls.Canvas.Right" />.</param>
      <param name="value">The point.</param>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="F:TomsToolbox.Wpf.CanvasAnchor.BottomRightProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.CanvasAnchor.BottomRight" /> attached property
            </summary>
      <AttachedPropertyComments>
        <summary>
            A helper property to assign the coordinates of a <see cref="T:System.Windows.Point" /> to the 
            <see cref="P:System.Windows.Controls.Canvas.Bottom" /> and <see cref="P:System.Windows.Controls.Canvas.Right" /> property in one single operation.
            </summary>
        <remarks>
            This property is only "one way", i.e. changing <see cref="P:System.Windows.Controls.Canvas.Bottom" /> or <see cref="P:System.Windows.Controls.Canvas.Right" /> 
            will not affect this attached property.
            </remarks>
      </AttachedPropertyComments>
    </member>
    <member name="T:TomsToolbox.Wpf.Composition.ComposableContentControl">
      <summary>
            A control used to create dynamic content from an IOC container.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.ComposableContentControl.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.Composition.ComposableContentControl" /> class.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.ComposableContentControl.OnInitialized(System.EventArgs)">
      <summary>
            Raises the <see cref="E:System.Windows.FrameworkElement.Initialized" /> event. This method is invoked whenever <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> is set to true internally.
            </summary>
      <param name="e">The <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
      <requires inheritedFrom="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)" inheritedFromTypeName="FrameworkElement" csharp="e != null" vb="e &lt;&gt; Nothing">e != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.ComposableContentControl.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement" /> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />.
            </summary>
      <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
    </member>
    <member name="F:TomsToolbox.Wpf.Composition.ComposableContentControl.RoleProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Composition.ComposableContentControl.Role" /> dependency property
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Composition.ComposableContentControl.ExportProviderProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Composition.ComposableContentControl.ExportProvider" /> dependency property
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.ComposableContentControl.Role">
      <summary>
            Gets or sets the role of the template.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.ComposableContentControl.ExportProvider">
      <summary>
            Gets or sets the export provider (IOC).
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.Composition.ComposablePartWithContext`1">
      <summary>
            Base class for a view model with a typed composition context.
            </summary>
      <typeparam name="T">The type of the composition context</typeparam>
    </member>
    <member name="T:TomsToolbox.Wpf.Composition.IComposablePartWithContext">
      <summary>
            Interface to be implemented by all objects supporting visual composition and require a context.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.Composition.IComposablePart">
      <summary>
            Interface to be implemented by all objects supporting visual composition.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.IComposablePartWithContext.CompositionContext">
      <summary>
            Gets or sets the composition context.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.ComposablePartWithContext`1.OnCompositionContextChanged(`0,`0)">
      <summary>
            Called when the composition context has changed.
            The base implementations raised the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.
            </summary>
      <param name="oldValue">The old value.</param>
      <param name="newValue">The new value.</param>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.ComposablePartWithContext`1.TomsToolbox#Wpf#Composition#IComposablePartWithContext#CompositionContext">
      <summary>
            Gets or sets the composition context.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.ComposablePartWithContext`1.CompositionContext">
      <summary>
            Gets the composition context.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.Composition.CompositionExtensions">
      <summary>
            Extension methods to simplify access of the composition host.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.CompositionExtensions.AddCatalog(TomsToolbox.Wpf.Composition.ICompositionHost,System.ComponentModel.Composition.Primitives.ComposablePartCatalog)">
      <summary>
            Adds a new catalog to the container.
            </summary>
      <param name="compositionHost">The composition host.</param>
      <param name="catalog">The catalog.</param>
      <requires csharp="compositionHost != null" vb="compositionHost &lt;&gt; Nothing">compositionHost != null</requires>
      <requires csharp="catalog != null" vb="catalog &lt;&gt; Nothing">catalog != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.CompositionExtensions.AddCatalog(TomsToolbox.Wpf.Composition.ICompositionHost,System.Reflection.Assembly[])">
      <summary>
            Adds a new assembly catalog to the containers aggregate catalog.
            </summary>
      <param name="compositionHost">The composition host.</param>
      <param name="assemblies">The assemblies to add.</param>
      <requires csharp="compositionHost != null" vb="compositionHost &lt;&gt; Nothing">compositionHost != null</requires>
      <requires csharp="assemblies != null" vb="assemblies &lt;&gt; Nothing">assemblies != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.CompositionExtensions.AddCatalog(TomsToolbox.Wpf.Composition.ICompositionHost,System.Type[])">
      <summary>
            Adds a new type catalog to the containers aggregate catalog.
            </summary>
      <param name="compositionHost">The composition host.</param>
      <param name="types">The types to add.</param>
      <requires csharp="compositionHost != null" vb="compositionHost &lt;&gt; Nothing">compositionHost != null</requires>
      <requires csharp="types != null" vb="types &lt;&gt; Nothing">types != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.CompositionExtensions.GetExportedValue``1(TomsToolbox.Wpf.Composition.ICompositionHost)">
      <summary>
            Returns the exported object with the contract name derived from the specified
            type parameter. If there is not exactly one matching exported object, an
            exception is thrown.
            </summary>
      <typeparam name="T">
            The type of the exported object to return. The contract name is also derived
            from this type parameter.
            </typeparam>
      <param name="compositionHost">The composition host.</param>
      <returns>
            The exported object with the contract name derived from the specified type
            parameter.
            </returns>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
            There are zero exported objects with the contract name derived from T in
            the System.ComponentModel.Composition.Hosting.CompositionContainer.-or-There
            is more than one exported object with the contract name derived from T in
            the System.ComponentModel.Composition.Hosting.CompositionContainer.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The System.ComponentModel.Composition.Hosting.CompositionContainer object
            has been disposed of.
            </exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">
            The underlying exported object cannot be cast to T.
            </exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">
            An error occurred during composition. System.ComponentModel.Composition.CompositionException.Errors
            will contain a collection of errors that occurred.
            </exception>
      <requires csharp="compositionHost != null" vb="compositionHost &lt;&gt; Nothing">compositionHost != null</requires>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.CompositionExtensions.GetExportedValue``1(TomsToolbox.Wpf.Composition.ICompositionHost,System.String)">
      <summary>
            Returns the exported object with the contract name derived from the specified
            type parameter. If there is not exactly one matching exported object, an
            exception is thrown.
            </summary>
      <typeparam name="T">
            The type of the exported object to return. The contract name is also derived
            from this type parameter.
            </typeparam>
      <param name="compositionHost">The composition host.</param>
      <param name="contractName">The contract name of the exported object to return, or null or an empty string ("") to use the default contract name.</param>
      <returns>
            The exported object with the contract name derived from the specified type
            parameter.
            </returns>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
            There are zero exported objects with the contract name derived from T in
            the System.ComponentModel.Composition.Hosting.CompositionContainer.-or-There
            is more than one exported object with the contract name derived from T in
            the System.ComponentModel.Composition.Hosting.CompositionContainer.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The System.ComponentModel.Composition.Hosting.CompositionContainer object
            has been disposed of.
            </exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">
            The underlying exported object cannot be cast to T.
            </exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">
            An error occurred during composition. System.ComponentModel.Composition.CompositionException.Errors
            will contain a collection of errors that occurred.
            </exception>
      <requires csharp="compositionHost != null" vb="compositionHost &lt;&gt; Nothing">compositionHost != null</requires>
      <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.CompositionExtensions.GetExportedValueOrDefault``1(TomsToolbox.Wpf.Composition.ICompositionHost,System.String)">
      <summary>
            Gets the exported object with the contract name derived from the specified type parameter
            or the default value for the specified type, or throws an exception if there is
            more than one matching exported object.
            </summary>
      <typeparam name="T">The type of the exported object to return. The contract name is also derived
            from this type parameter.</typeparam>
      <param name="compositionHost">The composition host.</param>
      <param name="contractName">The contract name of the exported object to return, or null or an empty string ("") to use the default contract name.</param>
      <returns>
            The exported object with the contract name derived from T, if found; otherwise, the default value for T.
            </returns>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
            There  is more than one exported object with the contract name derived from T in
            the System.ComponentModel.Composition.Hosting.CompositionContainer.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The System.ComponentModel.Composition.Hosting.CompositionContainer object
            has been disposed of.
            </exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">
            The underlying exported object cannot be cast to T.
            </exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">
            An error occurred during composition. System.ComponentModel.Composition.CompositionException.Errors
            will contain a collection of errors that occurred.
            </exception>
      <requires csharp="compositionHost != null" vb="compositionHost &lt;&gt; Nothing">compositionHost != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.CompositionExtensions.GetExportedValueOrDefault``1(TomsToolbox.Wpf.Composition.ICompositionHost)">
      <summary>
            Gets the exported object with the contract name derived from the specified type parameter
            or the default value for the specified type, or throws an exception if there is
            more than one matching exported object.
            </summary>
      <typeparam name="T">The type of the exported object to return. The contract name is also derived
            from this type parameter.</typeparam>
      <param name="compositionHost">The composition host.</param>
      <returns>
            The exported object with the contract name derived from T, if found; otherwise, the default value for T.
            </returns>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
            There  is more than one exported object with the contract name derived from T in
            the System.ComponentModel.Composition.Hosting.CompositionContainer.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The System.ComponentModel.Composition.Hosting.CompositionContainer object
            has been disposed of.
            </exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">
            The underlying exported object cannot be cast to T.
            </exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">
            An error occurred during composition. System.ComponentModel.Composition.CompositionException.Errors
            will contain a collection of errors that occurred.
            </exception>
      <requires csharp="compositionHost != null" vb="compositionHost &lt;&gt; Nothing">compositionHost != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.CompositionExtensions.ComposeExportedValue``1(TomsToolbox.Wpf.Composition.ICompositionHost,``0)">
      <summary>
            Creates a part from the specified value and composes it in the specified composition container. See <see cref="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,``0)" />.
            </summary>
      <typeparam name="T">The type of the new part.</typeparam>
      <param name="compositionHost">The composition host.</param>
      <param name="exportedValue">The value to compose.</param>
      <requires csharp="compositionHost != null" vb="compositionHost &lt;&gt; Nothing">compositionHost != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.CompositionExtensions.SatisfyImportsOnce(TomsToolbox.Wpf.Composition.ICompositionHost,System.Object)">
      <summary>
            Composes the specified part, with recomposition and validation disabled.
            </summary>
      <param name="compositionHost">The composition host.</param>
      <param name="attributedPart">The part to compose.</param>
      <requires csharp="compositionHost != null" vb="compositionHost &lt;&gt; Nothing">compositionHost != null</requires>
      <requires csharp="attributedPart != null" vb="attributedPart &lt;&gt; Nothing">attributedPart != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.CompositionExtensions.GetExportedValues``1(TomsToolbox.Wpf.Composition.ICompositionHost)">
      <summary>
            Gets all the exported objects with the contract name derived from the specified type parameter.
            </summary>
      <typeparam name="T">The type of the exported object to return. The contract name is also derived from this type parameter.</typeparam>
      <param name="compositionHost">The composition host.</param>
      <returns>
            The exported objects with the contract name derived from the specified type parameter, if found; otherwise, an empty <see cref="T:System.Collections.ObjectModel.Collection`1" /> object.
            </returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">One or more of the underlying exported objects cannot be cast to <typeparamref name="T" />.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
      <requires csharp="compositionHost != null" vb="compositionHost &lt;&gt; Nothing">compositionHost != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.CompositionExtensions.GetExportedValues``1(TomsToolbox.Wpf.Composition.ICompositionHost,System.String)">
      <summary>
            Gets all the exported objects with the specified contract name.
            </summary>
      <typeparam name="T">The type of the exported object to return.</typeparam>
      <param name="compositionHost">The composition host.</param>
      <param name="contractName">The contract name of the exported objects to return; or null or an empty string ("") to use the default contract name.</param>
      <returns>
            The exported objects with the specified contract name, if found; otherwise, an empty <see cref="T:System.Collections.ObjectModel.Collection`1" /> object.
            </returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">One or more of the underlying exported values cannot be cast to <typeparamref name="T" />.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
      <requires csharp="compositionHost != null" vb="compositionHost &lt;&gt; Nothing">compositionHost != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.CompositionExtensions.GetExports``1(TomsToolbox.Wpf.Composition.ICompositionHost)">
      <summary>
            Gets all the exports.
            </summary>
      <typeparam name="T">The type parameter of the System.Lazy{T} objects to return.</typeparam>
      <param name="compositionHost">The composition host.</param>
      <returns>
            The System.Lazy{T} objects, if found; otherwise, an empty System.Collections.Generic.IEnumerable{T} object.
            </returns>
      <requires csharp="compositionHost != null" vb="compositionHost &lt;&gt; Nothing">compositionHost != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.CompositionExtensions.GetExports``1(TomsToolbox.Wpf.Composition.ICompositionHost,System.String)">
      <summary>
            Gets all the exports with the specified contract name.
            </summary>
      <typeparam name="T">The type parameter of the System.Lazy{T} objects to return.</typeparam>
      <param name="compositionHost">The composition host.</param>
      <param name="contractName">The contract name of the System.Lazy{T} objects to return, or null or an empty string ("") to use the default contract name.</param>
      <returns>The System.Lazy{T} objects with the specified contract name, if found; otherwise, an empty System.Collections.Generic.IEnumerable{T} object.</returns>
      <requires csharp="compositionHost != null" vb="compositionHost &lt;&gt; Nothing">compositionHost != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.CompositionExtensions.GetService``1(System.IServiceProvider)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <typeparam name="T">The type of the service.</typeparam>
      <param name="serviceProvider">The service provider.</param>
      <returns>
            A service object of type <typeparamref name="T" />, or null if there is no service object of type <typeparamref name="T" />.
            </returns>
      <requires csharp="serviceProvider != null" vb="serviceProvider &lt;&gt; Nothing">serviceProvider != null</requires>
    </member>
    <member name="T:TomsToolbox.Wpf.Composition.CompositionHost">
      <summary>
            Implementation of <see cref="T:TomsToolbox.Wpf.Composition.ICompositionHost" /></summary>
      <invariant>_container != null</invariant>
    </member>
    <member name="T:TomsToolbox.Wpf.Composition.ICompositionHost">
      <summary>
            Class hosting a <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> with an <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" />.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.ICompositionHost.Container">
      <summary>
            Gets the composition container.
            </summary>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.ICompositionHost.Catalog">
      <summary>
            Gets the catalog of the container.
            </summary>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
        <ensures csharp="result.Catalogs != null" vb="result.Catalogs &lt;&gt; Nothing">result.Catalogs != null</ensures>
      </getter>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.CompositionHost.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.Composition.CompositionHost" /> class with a container that is thread safe.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.CompositionHost.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.Composition.CompositionHost" /> class.
            </summary>
      <param name="isThreadSafe">if set to <c>true</c> if the container is thread safe.</param>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.CompositionHost.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <returns>
            A service object of type <paramref name="serviceType" />.-or- null if there is no service object of type <paramref name="serviceType" />.
            </returns>
      <param name="serviceType">An object that specifies the type of service object to get. </param>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.CompositionHost.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.CompositionHost.Finalize">
      <summary>
            Finalizes an instance of the <see cref="T:TomsToolbox.Wpf.Composition.CompositionHost" /> class.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.CompositionHost.Container">
      <summary>
            Gets the container.
            </summary>
      <getter>
        <ensures inheritedFrom="M:TomsToolbox.Wpf.Composition.ICompositionHost.get_Container" inheritedFromTypeName="ICompositionHost" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.CompositionHost.Catalog">
      <summary>
            Gets the catalog of the container.
            </summary>
      <getter>
        <ensures inheritedFrom="M:TomsToolbox.Wpf.Composition.ICompositionHost.get_Catalog" inheritedFromTypeName="ICompositionHost" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
        <ensures inheritedFrom="M:TomsToolbox.Wpf.Composition.ICompositionHost.get_Catalog" inheritedFromTypeName="ICompositionHost" csharp="result.Catalogs != null" vb="result.Catalogs &lt;&gt; Nothing">result.Catalogs != null</ensures>
      </getter>
    </member>
    <member name="T:TomsToolbox.Wpf.Composition.ContentControlCompositionBehavior">
      <summary>
            Retrieves the exported object that matches RegionId and ItemId from the composition container
            and assigns it as the content of the associated <see cref="T:System.Windows.Controls.ContentControl" /></summary>
    </member>
    <member name="T:TomsToolbox.Wpf.Composition.VisualCompositionBehavior`1">
      <summary>
            Base class to implement visual composition behaviors.
            </summary>
      <typeparam name="T">The type the VisualCompositionBehavior can be attached to.</typeparam>
      <remarks>
            ViewModels declare themselves as candidates for visual composition by adding the <see cref="T:TomsToolbox.Wpf.Composition.VisualCompositionExportAttribute" />, 
            and the visual composition behaviors dynamically link the view models to the views with the matching region ids.
            </remarks>
    </member>
    <member name="F:TomsToolbox.Wpf.Composition.VisualCompositionBehavior`1.RegionIdProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Composition.VisualCompositionBehavior`1.RegionId" /> dependency property
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Composition.VisualCompositionBehavior`1.CompositionContextProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Composition.VisualCompositionBehavior`1.CompositionContext" /> dependency property
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.VisualCompositionBehavior`1.OnAttached">
      <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
      <remarks>
            Override this to hook up functionality to the AssociatedObject.
            </remarks>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.VisualCompositionBehavior`1.OnDetaching">
      <summary>
            Called when the behavior is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
      <remarks>
            Override this to unhook functionality from the AssociatedObject.
            </remarks>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.VisualCompositionBehavior`1.GetTarget(TomsToolbox.Wpf.Composition.IComposablePart)">
      <summary>
            Gets the target object for the item. 
            If the item implements <see cref="T:TomsToolbox.Wpf.Composition.IComposablePartFactory" />, the element returned by the factory is returned; 
            otherwise the item itself is returned.
            </summary>
      <param name="item">The item.</param>
      <returns>The item or the factory generated item.</returns>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.VisualCompositionBehavior`1.Update">
      <summary>
            Called when any of the constraints have changed and the target needs to be updated.
            </summary>
      <remarks>
            Derived classes override this to update the target element.
            </remarks>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.VisualCompositionBehavior`1.RegionId">
      <summary>
            Gets or sets the id of the region. The region id is used to select candidates for composition.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.VisualCompositionBehavior`1.CompositionContext">
      <summary>
            Gets or sets the composition context.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.VisualCompositionBehavior`1.ExportProvider">
      <summary>
            Gets or sets the export provider (IOC). The export provider must be registered with the <see cref="T:TomsToolbox.Wpf.Composition.ExportProviderLocator" />.
            </summary>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="F:TomsToolbox.Wpf.Composition.ContentControlCompositionBehavior.ItemIdProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Composition.ContentControlCompositionBehavior.ItemId" /> dependency property.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.ContentControlCompositionBehavior.Update">
      <summary>
            Updates this instance when any of the constraints have changed.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.ContentControlCompositionBehavior.ItemId">
      <summary>
            Gets or sets the name of the item that should be attached.
            </summary>
      <remarks>
            The first exported item matching RegionId and ItemId will be set as the content of the content control.
            </remarks>
    </member>
    <member name="T:TomsToolbox.Wpf.Composition.DataTemplateAttribute">
      <summary>
            Attribute to apply to views to dynamically generate the <see cref="T:System.Windows.DataTemplate" /> that associates the view with it's view model.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.Composition.IDataTemplateMetadata">
      <summary>
            Meta data for exported visuals.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.IDataTemplateMetadata.ViewModel">
      <summary>
            Gets the type of the view model that this visual has a representation for.
            </summary>
      <getter>
        <ensures csharp="result != (System.Type)null" vb="result &lt;&gt; ((System.Type)Nothing) ">result != (System.Type)null</ensures>
      </getter>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.IDataTemplateMetadata.Role">
      <summary>
            Gets the role of this visual. 
            If a role is set, a <see cref="T:TomsToolbox.Wpf.Composition.RoleBasedDataTemplateKey" /> will be created for this view; else a simple <see cref="T:System.Windows.DataTemplateKey" /> is used.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.DataTemplateAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.Composition.DataTemplateAttribute" /> class.
            </summary>
      <param name="viewModel">The type of the view model for which the template is designed.</param>
      <requires csharp="viewModel != (System.Type)null" vb="viewModel &lt;&gt; ((System.Type)Nothing) ">viewModel != (System.Type)null</requires>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.DataTemplateAttribute.ViewModel">
      <summary>
            Gets the type of the view model that this visual has a representation for.
            </summary>
      <getter>
        <ensures inheritedFrom="M:TomsToolbox.Wpf.Composition.IDataTemplateMetadata.get_ViewModel" inheritedFromTypeName="IDataTemplateMetadata" csharp="result != (System.Type)null" vb="result &lt;&gt; ((System.Type)Nothing) ">result != (System.Type)null</ensures>
      </getter>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.DataTemplateAttribute.Role">
      <summary>
            Gets the role of this visual. 
            If a role is set, a <see cref="T:TomsToolbox.Wpf.Composition.RoleBasedDataTemplateKey" /> will be created for this view; else a simple <see cref="T:System.Windows.DataTemplateKey" /> is used.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.Composition.DataTemplateManager">
      <summary>
            Access methods for composite data template exports.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Composition.DataTemplateManager.ContractName">
      <summary>
            The contract name used for export.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Composition.DataTemplateManager.ExportsComparer">
      <summary>
            A comparer to compare exports for dynamic data templates.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.DataTemplateManager.GetRole(System.Windows.DependencyObject)">
      <summary>
            Gets the role of the view.
            </summary>
      <param name="obj">The object.</param>
      <returns>The role</returns>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.DataTemplateManager.SetRole(System.Windows.DependencyObject,System.Object)">
      <summary>
            Sets the role of the view.
            </summary>
      <param name="obj">The object.</param>
      <param name="value">The value.</param>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="F:TomsToolbox.Wpf.Composition.DataTemplateManager.RoleProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Composition.DataTemplateManager.Role" /> attached property.
            </summary>
      <AttachedPropertyComments>
        <summary>
            Gets or sets the role associated with the view.
            </summary>
      </AttachedPropertyComments>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.DataTemplateManager.CreateDynamicDataTemplates(System.ComponentModel.Composition.Hosting.ExportProvider)">
      <summary>
            Creates the dynamic data templates by looking up all MEF exports with the <see cref="T:TomsToolbox.Wpf.Composition.DataTemplateAttribute" /> attribute and 
            creating a resource dictionary entry for every value.
            </summary>
      <param name="exportProvider">The export provider.</param>
      <returns>
            The resource dictionary containing the dynamic data templates. This is usually added to your applications resources merged dictionaries.
            </returns>
      <requires csharp="exportProvider != null" vb="exportProvider &lt;&gt; Nothing">exportProvider != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.DataTemplateManager.CreateKey(System.Type,System.Object)">
      <summary>
            Creates the template key.
            </summary>
      <param name="dataType">The type for which the template is used to display items.</param>
      <param name="role">The optional role.</param>
      <returns>The key for the specified parameters.</returns>
      <requires csharp="dataType != (System.Type)null" vb="dataType &lt;&gt; ((System.Type)Nothing) ">dataType != (System.Type)null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.DataTemplateManager.GetDataTemplateExports(System.ComponentModel.Composition.Hosting.ExportProvider)">
      <summary>
            Gets the dynamic data template exports.
            </summary>
      <param name="exportProvider">The export provider.</param>
      <returns>All exports.</returns>
      <requires csharp="exportProvider != null" vb="exportProvider &lt;&gt; Nothing">exportProvider != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.DataTemplateManager.GetDataTemplateView(System.ComponentModel.Composition.Hosting.ExportProvider,System.Type,System.Object)">
      <summary>
            Gets the view for the specified view model.
            </summary>
      <param name="exportProvider">The export provider.</param>
      <param name="viewModel">The view model.</param>
      <param name="role">The role.</param>
      <returns>The view</returns>
      <requires csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        TomsToolbox.Wpf.Composition.DataTemplateManager.&lt;&gt;c__DisplayClass4 local_0 = new TomsToolbox.Wpf.Composition.DataTemplateManager.&lt;&gt;c__DisplayClass4();&#xD;&#xA;        local_0.viewModel = viewModel;&#xD;&#xA;        local_0.role = role;&#xD;&#xA;    }&#xD;&#xA;    return exportProvider != null; })()" vb="(() =&gt; {&#xD;&#xA;    TomsToolbox.Wpf.Composition.DataTemplateManager.&lt;&gt;c__DisplayClass4 local_0 = New TomsToolbox.Wpf.Composition.DataTemplateManager.&lt;&gt;c__DisplayClass4();&#xD;&#xA;    local_0.viewModel = viewModel&#xD;&#xA;    local_0.role = role&#xD;&#xA;    return exportProvider &lt;&gt; Nothing; })()">(() =&gt; {
    {
        TomsToolbox.Wpf.Composition.DataTemplateManager.&lt;&gt;c__DisplayClass4 local_0 = new TomsToolbox.Wpf.Composition.DataTemplateManager.&lt;&gt;c__DisplayClass4();
        local_0.viewModel = viewModel;
        local_0.role = role;
    }
    return exportProvider != null; })()</requires>
      <requires csharp="local_0.viewModel != (System.Type)null" vb="local_0.viewModel &lt;&gt; ((System.Type)Nothing) ">local_0.viewModel != (System.Type)null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.DataTemplateManager.GetDataTemplateExportsMetadata(System.ComponentModel.Composition.Hosting.ExportProvider)">
      <summary>
            Gets all the meta data for the exports.
            </summary>
      <param name="exportProvider">The export provider.</param>
      <returns>The meta data of all exports.</returns>
      <requires csharp="exportProvider != null" vb="exportProvider &lt;&gt; Nothing">exportProvider != null</requires>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.DataTemplateMetadataContract.ViewModel">
      <summary>
            Gets the type of the view model that this visual has a representation for.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.DataTemplateMetadataContract.Role">
      <summary>
            Gets the role of this visual. 
            If a role is set, a <see cref="T:TomsToolbox.Wpf.Composition.RoleBasedDataTemplateKey" /> will be created for this view; else a simple <see cref="T:System.Windows.DataTemplateKey" /> is used.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.Composition.ExportProviderLocator">
      <summary>
            Provides location service for the export provider to the WPF UI tree.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.ExportProviderLocator.Register(System.ComponentModel.Composition.Hosting.ExportProvider)">
      <summary>
            Registers the specified export provider.
            </summary>
      <param name="exportProvider">The export provider.</param>
      <requires csharp="exportProvider != null" vb="exportProvider &lt;&gt; Nothing">exportProvider != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.ExportProviderLocator.GetExportProvider(System.Windows.DependencyObject)">
      <summary>
            Gets the active export provider.
            </summary>
      <param name="obj">The object.</param>
      <returns>The exports provider</returns>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.ExportProviderLocator.SetExportProvider(System.Windows.DependencyObject,System.ComponentModel.Composition.Hosting.ExportProvider)">
      <summary>
            Sets the export provider.
            </summary>
      <param name="obj">The object.</param>
      <param name="value">The value.</param>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="F:TomsToolbox.Wpf.Composition.ExportProviderLocator.ExportProviderProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Composition.ExportProviderLocator.ExportProvider" /> attached property.
            </summary>
      <AttachedPropertyComments>
        <summary>
            Makes the export provider available in the WPF visual tree.
            </summary>
      </AttachedPropertyComments>
    </member>
    <member name="T:TomsToolbox.Wpf.Composition.IComposablePartFactory">
      <summary>
            Interface to be implemented by all objects supporting visual composition and provide individual objects per context.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.IComposablePartFactory.GetPart(System.Object)">
      <summary>
            Gets the part for the specified context.
            </summary>
      <param name="compositionContext">The composition context.</param>
      <returns>The part to be used in composition.</returns>
    </member>
    <member name="T:TomsToolbox.Wpf.Composition.ISelectableComposablePart">
      <summary>
            Base class for items that export a selectable item for a selector control. 
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.ISelectableComposablePart.IsSelected">
      <summary>
            Gets or sets a value indicating whether this instance is selected.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.Composition.ItemsControlCompositionBehavior">
      <summary>
            Retrieves all exported <see cref="T:TomsToolbox.Wpf.Composition.IComposablePart" /> items that match the RegionId from the composition container and assigns them as the items source of the associated <see cref="T:System.Windows.Controls.ItemsControl" /><para />
            If the items control is a <see cref="T:System.Windows.Controls.Primitives.Selector" />, and the composable object implement <see cref="T:TomsToolbox.Wpf.Composition.ISelectableComposablePart" />, the selection of the selector is synchronized with the <see cref="P:TomsToolbox.Wpf.Composition.ISelectableComposablePart.IsSelected" /> property.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.ItemsControlCompositionBehavior.Update">
      <summary>
            Updates this instance.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.ItemsControlCompositionBehavior.OnDetaching">
      <summary>
            Called when the behavior is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
      <remarks>
            Override this to unhook functionality from the AssociatedObject.
            </remarks>
    </member>
    <member name="T:TomsToolbox.Wpf.Composition.IVisualCompositionMetadata">
      <summary>
            Export metadata for <see cref="T:TomsToolbox.Wpf.Composition.IComposablePart" /> objects.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.IVisualCompositionMetadata.ItemId">
      <summary>
            Gets the id of the item for visual composition.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.IVisualCompositionMetadata.Sequence">
      <summary>
            Gets a sequence to provide ordering of lists.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.IVisualCompositionMetadata.TargetRegions">
      <summary>
            Gets the target regions for visual composition.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.Composition.ModuleResourceUriAttribute">
      <summary>
            Attribute to associate a resource with a module; when a module is loaded dynamically, the resource can be linked into the application resource scope.
            </summary>
      <invariant>Uri != null</invariant>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.ModuleResourceUriAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.Composition.ModuleResourceUriAttribute" /> class.
            </summary>
      <param name="uri">The URI of the resource.</param>
      <requires csharp="uri != null" vb="uri &lt;&gt; Nothing">uri != null</requires>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.ModuleResourceUriAttribute.Uri">
      <summary>
            Gets the URI of the resource.
            </summary>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
      <setter>
        <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      </setter>
    </member>
    <member name="T:TomsToolbox.Wpf.Composition.RoleBasedDataTemplateKey">
      <summary>
            A resource key for data templates, like the <see cref="T:System.Windows.DataTemplateKey" />, but adding a <see cref="P:TomsToolbox.Wpf.Composition.RoleBasedDataTemplateKey.Role" /> property to distinguish
            several data templates for different roles.
            </summary>
      <remarks>
            Mainly used in conjunction with the <see cref="T:TomsToolbox.Wpf.Composition.RoleBasedDataTemplateSelector" />.
            </remarks>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.RoleBasedDataTemplateKey.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.Composition.RoleBasedDataTemplateKey" /> class.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.RoleBasedDataTemplateKey.#ctor(System.Object,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.Composition.RoleBasedDataTemplateKey" /> class.
            </summary>
      <param name="dataType">Type of the data.</param>
      <param name="role">The role.</param>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.RoleBasedDataTemplateKey.Equals(TomsToolbox.Wpf.Composition.RoleBasedDataTemplateKey)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.RoleBasedDataTemplateKey.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
      <param name="o">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.RoleBasedDataTemplateKey.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.RoleBasedDataTemplateKey.Role">
      <summary>
            Gets or sets the role. The role is immutable and can be set only once.
            </summary>
      <exception cref="T:System.InvalidOperationException">Object is immutable.</exception>
    </member>
    <member name="T:TomsToolbox.Wpf.Composition.RoleBasedDataTemplateSelector">
      <summary>
            A template selector that finds the <see cref="T:System.Windows.DataTemplate" /> by the <see cref="T:TomsToolbox.Wpf.Composition.RoleBasedDataTemplateKey" />.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.RoleBasedDataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
      <summary>
            When overridden in a derived class, returns a <see cref="T:System.Windows.DataTemplate" /> based on custom logic.
            </summary>
      <param name="item">The data object for which to select the template.</param>
      <param name="container">The data-bound object.</param>
      <returns>
            Returns a <see cref="T:System.Windows.DataTemplate" /> or null. The default value is null.
            </returns>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.RoleBasedDataTemplateSelector.Role">
      <summary>
            Gets or sets the role to use in the lookup.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.RoleBasedDataTemplateSelector.FallbackValue">
      <summary>
            Gets or sets the template used as fallback if no template for the specified role is found.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.Composition.VisualCompositionExportAttribute">
      <summary>
            Attribute to apply to view models to support visual composition.
            </summary>
      <invariant>_targetRegions != null</invariant>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.VisualCompositionExportAttribute.#ctor(System.String[])">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.Composition.VisualCompositionExportAttribute" /> class.
            </summary>
      <param name="targetRegions">The names of the region(s) where this view should appear.</param>
      <requires csharp="targetRegions != null" vb="targetRegions &lt;&gt; Nothing">targetRegions != null</requires>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.VisualCompositionExportAttribute.ItemId">
      <summary>
            Gets the name of the view model for visual composition.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.VisualCompositionExportAttribute.Sequence">
      <summary>
            Gets a sequence to support ordering of view model collections.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Composition.VisualCompositionExportAttribute.TargetRegions">
      <summary>
            Gets the target regions for visual composition.
            </summary>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="T:TomsToolbox.Wpf.Controls.IImage">
      <summary>
            Implemented by image providers to provide a dynamically loadable image.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.IImage.Source">
      <summary>
            Gets the source of the image.
            </summary>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.IImage.IsLoaded">
      <summary>
            Gets a value indicating whether the image of this instance is loaded.
            </summary>
    </member>
    <member name="E:TomsToolbox.Wpf.Controls.IImage.Loaded">
      <summary>
            Occurs when the image is loaded.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.Controls.IImageProvider">
      <summary>
            Implemented by image providers for the <see cref="T:TomsToolbox.Wpf.Controls.Map" /> control.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Controls.IImageProvider.GetImage(TomsToolbox.Wpf.Controls.IMapTile)">
      <summary>
            Gets the image for a map tile.
            </summary>
      <param name="tile">The tile for which to provide the image.</param>
      <returns>The image.</returns>
      <requires csharp="tile != null" vb="tile &lt;&gt; Nothing">tile != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.IImageProvider.MinZoom">
      <summary>
            Gets the minimum zoom factor supported by this provider.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.IImageProvider.MaxZoom">
      <summary>
            Gets the maximum zoom factor supported by this provider.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.Controls.IMapTile">
      <summary>
            Implemented by representations of a map tile.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Controls.IMapTile.Unload">
      <summary>
            Unloads this instance when the tile is no longer visible.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.IMapTile.X">
      <summary>
            Gets the horizontal index of this tile.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.IMapTile.Y">
      <summary>
            Gets the vertical index of this tile.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.IMapTile.ZoomLevel">
      <summary>
            Gets the zoom level of this tile.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.IMapTile.Parent">
      <summary>
            Gets the parent tile, or <c>null</c> if this is the root tile.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.Controls.InPlaceEdit">
      <summary>
            Text control supporting in place editing.
            <para />
            Editing starts
            <list type="bullet"><item>by deferred mouse double click</item><item>by pressing F2</item><item>setting IsEditing to true</item></list><para />
            Editing terminates
            <list type="bullet"><item>when the focus gets lost (changes accepted)</item><item>when setting IsEditing to false (changes accepted)</item><item>when the user clicks outside the text box or moves the mouse wheel (changes accepted)</item><item>by pressing RETURN (changes accepted)</item><item>by pressing ESC (changes rejected)</item></list></summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Controls.InPlaceEdit.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.Controls.InPlaceEdit" /> class.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.InPlaceEdit.TextProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.InPlaceEdit.Text" /> dependency property.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.InPlaceEdit.IsEditingProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.InPlaceEdit.IsEditing" /> dependency property.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.InPlaceEdit.IsEditingDisabledProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.InPlaceEdit.IsEditingDisabled" /> dependency property.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.InPlaceEdit.HasErrorsProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.InPlaceEdit.HasErrors" /> dependency property
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.InPlaceEdit.TextTrimmingProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.InPlaceEdit.TextTrimming" /> dependency property
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Controls.InPlaceEdit.OnApplyTemplate">
      <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Controls.InPlaceEdit.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event is raised on this element. Implement this method to add class handling for this event.
            </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was pressed.</param>
      <requires inheritedFrom="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" inheritedFromTypeName="UIElement" csharp="e != null" vb="e &lt;&gt; Nothing">e != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.Controls.InPlaceEdit.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
            Raises the <see cref="E:System.Windows.Controls.Control.MouseDoubleClick" /> routed event.
            </summary>
      <param name="e">The event data.</param>
      <requires inheritedFrom="M:System.Windows.Controls.Control.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)" inheritedFromTypeName="Control" csharp="e != null" vb="e &lt;&gt; Nothing">e != null</requires>
    </member>
    <member name="E:TomsToolbox.Wpf.Controls.InPlaceEdit.Validate">
      <summary>
            Occurs when the edited text needs to be validated.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.InPlaceEdit.Text">
      <summary>
            Gets or sets the text to be edited.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.InPlaceEdit.IsEditing">
      <summary>
            Gets or sets a value indicating whether editing is active.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.InPlaceEdit.IsEditingDisabled">
      <summary>
            Gets or sets a value indicating whether editing is currently disabled.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.InPlaceEdit.HasErrors">
      <summary>
            Gets or sets a value indicating whether the edited text has errors; if there are errors the text can't be committed.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.InPlaceEdit.TextTrimming">
      <summary>
            Gets or sets the text trimming.
            </summary>
      <value>
            The text trimming.
            </value>
    </member>
    <member name="T:TomsToolbox.Wpf.Controls.LoadingIndicator">
      <summary>
            A loading indicator showing a rotating animation when active.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Controls.LoadingIndicator.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.Controls.LoadingIndicator" /> class.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.LoadingIndicator.IsActiveProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.LoadingIndicator.IsActive" /> dependency property
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.LoadingIndicator.HeaderProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.LoadingIndicator.Header" /> dependency property
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.LoadingIndicator.ActiveBackgroundColorProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.LoadingIndicator.ActiveBackgroundColor" /> dependency property
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.LoadingIndicator.AnimationLayoutTransformProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.LoadingIndicator.AnimationLayoutTransform" /> dependency property
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.LoadingIndicator.IsActive">
      <summary>
            Gets or sets a value indicating whether the loading indicator is active or hidden.
            </summary>
      <value>
        <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.LoadingIndicator.Header">
      <summary>
            Gets or sets the header that is displayed centered above the graphics.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.LoadingIndicator.ActiveBackgroundColor">
      <summary>
            Gets or sets the background when the loading indicator is active.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.LoadingIndicator.AnimationLayoutTransform">
      <summary>
            Gets or sets the layout transform applied to the animation.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.Controls.Map">
      <summary>
            A control showing maps represented in a tile system, e.g. Open Street Map, Bing or Google maps.
            See e.g. <see href="https://msdn.microsoft.com/en-us/library/bb259689.aspx" /> for a description how the tile system works.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.Map.TemplatePartWorld">
      <summary>
            The template part name of the world visual.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.Map.TemplatePartViewport">
      <summary>
            The template part name of the viewport visual.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Controls.Map.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.Controls.Map" /> class.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.Map.ViewportSizeProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.Map.ViewportSize" /> dependency property
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.Map.ImageProviderProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.Map.ImageProvider" /> dependency property
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.Map.ZoomFactorProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.Map.ZoomFactor" /> dependency property
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.Map.ZoomLevelProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.Map.ZoomLevel" /> dependency property
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.Map.CenterProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.Map.Center" /> dependency property
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.Map.OffsetProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.Map.Offset" /> read only dependency property
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.Map.ZoomingPointProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.Map.ZoomingPoint" /> dependency property
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.Map.BoundsProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.Map.Bounds" /> dependency property
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.Map.WorldProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.Map.World" /> dependency property.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.Map.ViewportProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.Map.Viewport" /> dependency property.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.Map.MousePositionProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.Map.MousePosition" /> dependency property.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.Map.MouseDoubleClickCommandProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.Map.MouseDoubleClickCommand" /> dependency property.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Controls.Map.OnApplyTemplate">
      <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Controls.Map.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
      <summary>
            Raises the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> event, using the specified information as part of the eventual event data.
            </summary>
      <param name="sizeInfo">Details of the old and new size involved in the change.</param>
    </member>
    <member name="M:TomsToolbox.Wpf.Controls.Map.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
      <requires inheritedFrom="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)" inheritedFromTypeName="UIElement" csharp="e != null" vb="e &lt;&gt; Nothing">e != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.Controls.Map.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
            Raises the <see cref="E:System.Windows.Controls.Control.MouseDoubleClick" /> routed event.
            </summary>
      <param name="e">The event data.</param>
      <requires inheritedFrom="M:System.Windows.Controls.Control.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)" inheritedFromTypeName="Control" csharp="e != null" vb="e &lt;&gt; Nothing">e != null</requires>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.Map.ViewportSize">
      <summary>
            Gets the zoom factor.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.Map.ImageProvider">
      <summary>
            Gets or sets the image provider.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.Map.ZoomFactor">
      <summary>
            Gets the zoom factor.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.Map.ZoomLevel">
      <summary>
            Gets or sets the zoom level. Set to integer values to get non-blurred images.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.Map.Center">
      <summary>
            Gets or sets the logical point of the map that is displayed in the center of the viewport.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.Map.Offset">
      <summary>
            Gets the logical offset that the map image is moved relative to it's origin.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.Map.ZoomingPoint">
      <summary>
            Gets or sets the logical coordinates of the zooming point that will stay fixed when zooming.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.Map.Bounds">
      <summary>
            Gets the bounds of the viewport in logical coordinates.
            </summary>
      <remarks>
            This property only has a public setter to enable binding; changing this property wont have any effect.
            </remarks>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.Map.World">
      <summary>
            Gets the element representing the map layer.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.Map.Viewport">
      <summary>
            Gets the element representing the viewport.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.Map.MousePosition">
      <summary>
            Gets the last mouse position when the mouse was over the map in logical coordinates.
            </summary>
      <remarks>
            This property only has a public setter to enable binding; changing this property wont have any effect.
            </remarks>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.Map.MouseDoubleClickCommand">
      <summary>
            Gets or sets the double click command. The command will be executed when the user double clicks on the map.
            The command parameter is a <see cref="T:System.Windows.Point" /> containing the logical coordinates.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.Controls.MapTile">
      <summary>
            Represents on tile in the map.
            </summary>
      <summary>
            MapTile
            </summary>
      <invariant>World != null</invariant>
      <invariant>SubLevel != null</invariant>
    </member>
    <member name="T:TomsToolbox.Wpf.ILayer">
      <summary>
            Interface to be implemented by visual layers that need to be forced to invalidate their layout independent of the WPF render cycle.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.ILayer.Invalidate">
      <summary>
            Invalidates the layout of this instance.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.MapTile.TileSize">
      <summary>
            The size of one tile in pixels.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Controls.MapTile.#ctor">
      <summary>
            Initializes a new root instance of the <see cref="T:TomsToolbox.Wpf.Controls.MapTile" /> class.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Controls.MapTile.#ctor(TomsToolbox.Wpf.Controls.IMapTile,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.Controls.MapTile" /> class.
            </summary>
      <param name="parent">The parent.</param>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
    </member>
    <member name="M:TomsToolbox.Wpf.Controls.MapTile.Unload">
      <summary>
            Unloads this instance when the tile is no longer visible.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.MapTile.ViewportProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.MapTile.Viewport" /> dependency property
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.MapTile.ImageProviderProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.MapTile.ImageProvider" /> dependency property
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.MapTile.ImageProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.MapTile.Image" /> dependency property
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Controls.MapTile.Invalidate">
      <summary>
            Invalidates the layout of this instance.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Controls.MapTile.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.Controls.MapTile.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.MapTile.X">
      <summary>
            Gets the horizontal index of this tile.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.MapTile.Y">
      <summary>
            Gets the vertical index of this tile.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.MapTile.ZoomLevel">
      <summary>
            Gets the zoom level of this tile.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.MapTile.TomsToolbox#Wpf#Controls#IMapTile#Parent">
      <summary>
            Gets the logical parent  element of this element.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.MapTile.Viewport">
      <summary>
            Gets or sets the viewport where the map will be displayed.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.MapTile.ImageProvider">
      <summary>
            Gets or sets the image provider that can load the images.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.MapTile.Image">
      <summary>
            Gets or sets the image for this tile.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.Converters.BooleanToVisibilityConverter">
      <summary>
            A static class hosting a singleton instance of the <see cref="T:System.Windows.Controls.BooleanToVisibilityConverter" /></summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Converters.BooleanToVisibilityConverter.Default">
      <summary>
            The singleton instance of the converter.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.Converters.ColorNameToBrushConverter">
      <summary>
            Converts a color name to the corresponding solid color brush. See <see cref="T:System.Windows.Media.BrushConverter" /> for supported values.
            </summary>
      <invariant>Converter != null</invariant>
    </member>
    <member name="F:TomsToolbox.Wpf.Converters.ColorNameToBrushConverter.Default">
      <summary>
            The singleton instance of the converter.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.ColorNameToBrushConverter.Convert(System.String)">
      <summary>
            Converts the specified color name.
            </summary>
      <param name="colorName">The color name.</param>
      <returns>The corresponding brush if the conversion was successful; otherwise <c>null</c>.</returns>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.ColorNameToBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value.
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.ColorNameToBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value.
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="T:TomsToolbox.Wpf.Converters.CompositeConverter">
      <summary>
            A converter composed of a chain of converters. The converters are invoked in the oder specified.
            </summary>
      <invariant>_converters != null</invariant>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.CompositeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value.
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.CompositeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value.
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
    </member>
    <member name="P:TomsToolbox.Wpf.Converters.CompositeConverter.Converters">
      <summary>
            Gets the converters.
            </summary>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="T:TomsToolbox.Wpf.Converters.ConfirmedCommandConverter">
      <summary>
            A converter to use in <see cref="T:System.Windows.Input.ICommand" /> bindings to intercept or filter command executions in the view layer in MVVM applications.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.ConfirmedCommandConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value.
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.ConfirmedCommandConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value.
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="E:TomsToolbox.Wpf.Converters.ConfirmedCommandConverter.Executing">
      <summary>
            Occurs when the command is being executed. The view can connect to this event to e.g. show a message box or modify the command parameter.
            </summary>
    </member>
    <member name="E:TomsToolbox.Wpf.Converters.ConfirmedCommandConverter.Error">
      <summary>
            Occurs when an exception is raised during command execution.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.Converters.ConfirmedCommandEventArgs">
      <summary>
            Event arguments for the <see cref="E:TomsToolbox.Wpf.Converters.ConfirmedCommandConverter.Executing" /> event.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Converters.ConfirmedCommandEventArgs.Parameter">
      <summary>
            Gets or sets the parameter that will be passed to the command when it's executed.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.Converters.CoordinatesToPointConverter">
      <summary>
            Converts WGS-84 coordinates into logical XY coordinates in the range 0..1 and back.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Converters.CoordinatesToPointConverter.Default">
      <summary>
            The singleton instance of the converter.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.CoordinatesToPointConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value.
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.CoordinatesToPointConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value.
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
    </member>
    <member name="T:TomsToolbox.Wpf.Converters.DoubleToThicknessConverter">
      <summary>
            Converts a single number to a uniform <see cref="T:System.Windows.Thickness" />, optionally multiplying with the thickness passed as converter parameter.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Converters.DoubleToThicknessConverter.Default">
      <summary>
            The singleton instance of the converter.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.DoubleToThicknessConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. 
            </summary>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.DoubleToThicknessConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. 
            </summary>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
    </member>
    <member name="T:TomsToolbox.Wpf.Converters.EnumToBooleanConverter">
      <summary>
            Tests if an enum value matches one of the given values provides as the converter parameter. 
            If the enum has a <see cref="T:System.FlagsAttribute" />, the match is done with the logic "is any flag set".
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Converters.EnumToBooleanConverter.Default">
      <summary>
            The singleton instance of the converter.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.EnumToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. 
            </summary>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.EnumToBooleanConverter.Convert(System.Object,System.String)">
      <summary>
            Converts the specified enum value into a boolean.
            </summary>
      <param name="value">The enum value.</param>
      <param name="matches">A comma separated list of enum names to match.</param>
      <returns>True if the value matches one of the enum names.</returns>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.EnumToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. 
            </summary>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
    </member>
    <member name="T:TomsToolbox.Wpf.Converters.EnumToValuesConverter">
      <summary>
            Converts the specified enum-type into an array of the individual enum values.
            The converter parameter can be used to specify a comma separated exclude list.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Converters.EnumToValuesConverter.Default">
      <summary>
            The singleton instance of the converter.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.EnumToValuesConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. 
            </summary>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.EnumToValuesConverter.Convert(System.Type)">
      <summary>
            Converts the specified enum-type into an array of the individual enum values.
            </summary>
      <param name="type">The enum type.</param>
      <returns>An array of the enum's values.</returns>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.EnumToValuesConverter.Convert(System.Type,System.String)">
      <summary>
            Converts the specified enum-type into an array of the individual enum values.
            </summary>
      <param name="type">The enum type.</param>
      <param name="excluded">A comma separated list of values to exclude.</param>
      <returns>An array of the enum's values.</returns>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.EnumToValuesConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. 
            </summary>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
    </member>
    <member name="T:TomsToolbox.Wpf.Converters.ObjectToAttributeConverter`1">
      <summary>
            Converts an object to a value derived from an attribute of the object.
            </summary>
      <typeparam name="T">The attribute to look up.</typeparam>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.ObjectToAttributeConverter`1.InternalConvert(System.Object,System.Type,System.Func{`0,System.String})">
      <summary>
            Does the conversion.
            </summary>
      <param name="value">The value.</param>
      <param name="enumType">An optional type of an enum to support converting <see cref="T:System.Enum" /> where the value is given as a number or string.</param>
      <param name="selector">The selector to get the desired value from the attribute.</param>
      <returns>The converted value.</returns>
      <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      <requires csharp="selector != null" vb="selector &lt;&gt; Nothing">selector != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.ObjectToAttributeConverter`1.InternalConvert(System.Object,System.Type,System.Func{`0,System.String},System.Func{`0,System.Boolean})">
      <summary>
            Does the conversion.
            </summary>
      <param name="value">The value.</param>
      <param name="enumType">An optional type of an enum to support converting <see cref="T:System.Enum" /> where the value is given as a number or string.</param>
      <param name="selector">The selector to get the desired value from the attribute.</param>
      <param name="predicate">A predicate to search for a specific attribute.</param>
      <returns>
            The converted value.
            </returns>
      <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      <requires csharp="selector != null" vb="selector &lt;&gt; Nothing">selector != null</requires>
      <requires csharp="predicate != null" vb="predicate &lt;&gt; Nothing">predicate != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.ObjectToAttributeConverter`1.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. 
            </summary>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.ObjectToAttributeConverter`1.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value.
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
    </member>
    <member name="T:TomsToolbox.Wpf.Converters.ObjectToDescriptionConverter">
      <summary>
             Takes an object and returns the description taken from it's <see cref="T:System.ComponentModel.DescriptionAttribute" /></summary>
      <example>
        <code language="C#">
             enum Items
             {
                 [Description("This is item 1")]
                 Item1,
                 [Description("This is item 2")]
                 Item2
             }
            
             Assert.Equals("This is item 1", ObjectToDescriptionConverter.Convert(Items.Item1));
             </code>
      </example>
      <remarks>Works with any object; for enum types the attribute of the field is returned.</remarks>
    </member>
    <member name="F:TomsToolbox.Wpf.Converters.ObjectToDescriptionConverter.Default">
      <summary>
            The singleton instance of the converter.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.ObjectToDescriptionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value.
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.ObjectToDescriptionConverter.Convert(System.Object)">
      <summary>
            Converts the specified value to the description taken from it's <see cref="T:System.ComponentModel.DescriptionAttribute" /></summary>
      <param name="value">The value.</param>
      <returns>The description of the value.</returns>
      <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.ObjectToDescriptionConverter.Convert(System.Object,System.Type)">
      <summary>
            Converts the specified value to the description taken from it's <see cref="T:System.ComponentModel.DescriptionAttribute" /></summary>
      <param name="value">The value.</param>
      <param name="enumType">An optional type of an enum to support converting <see cref="T:System.Enum" /> where the value is given as a number or string.</param>
      <returns>The description of the value.</returns>
      <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:TomsToolbox.Wpf.Converters.ObjectToDisplayNameConverter">
      <summary>
             Takes an object and returns the display name taken from it's <see cref="T:System.ComponentModel.DisplayNameAttribute" /></summary>
      <example>
        <code language="C#">
             enum Items
             {
                 [DisplayName("This is item 1")]
                 Item1,
                 [DisplayName("This is item 2")]
                 Item2
             }
            
             Assert.Equals("This is item 1", ObjectToDisplayNameConverter.Convert(Items.Item1));
             </code>
      </example>
      <remarks>Works with any object; for enum types the attribute of the field is returned.</remarks>
    </member>
    <member name="F:TomsToolbox.Wpf.Converters.ObjectToDisplayNameConverter.Default">
      <summary>
            The singleton instance of the converter.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.ObjectToDisplayNameConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value.
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.ObjectToDisplayNameConverter.Convert(System.Object)">
      <summary>
            Converts the specified value to the display name taken from it's <see cref="T:System.ComponentModel.DisplayNameAttribute" /></summary>
      <param name="value">The value.</param>
      <returns>The display name of the value.</returns>
      <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.ObjectToDisplayNameConverter.Convert(System.Object,System.Type)">
      <summary>
            Converts the specified value to the display name taken from it's <see cref="T:System.ComponentModel.DisplayNameAttribute" /></summary>
      <param name="value">The value.</param>
      <param name="enumType">An optional type of an enum to support converting <see cref="T:System.Enum" /> where the value is given as a number or string.</param>
      <returns>The display name of the value.</returns>
      <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:TomsToolbox.Wpf.Converters.ObjectToTextConverter">
      <summary>
             Takes an object and returns the text taken from it's <see cref="T:TomsToolbox.Core.TextAttribute" /></summary>
      <example>
        <code>
             enum Items
             {
                 [Text("key2", "This is other text on item 1")]
                 [Text("key1", "This is item 1")]
                 Item1,
                 [Text("key1", "This is item 2")]
                 Item2
             }
            
             Assert.Equals("This is item 1", ObjectToTextConverter.Convert("key1", Items.Item1));
             </code>
      </example>
      <remarks>Works with any object; for enum types the attribute of the field is returned. When used via the <see cref="T:System.Windows.Data.IValueConverter" /> interface, the key is specified as the converter parameter.</remarks>
    </member>
    <member name="F:TomsToolbox.Wpf.Converters.ObjectToTextConverter.Default">
      <summary>
            The singleton instance of the converter.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.ObjectToTextConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value.
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.ObjectToTextConverter.Convert(System.Object,System.Object)">
      <summary>
            Converts the specified value to the text taken from it's <see cref="T:TomsToolbox.Core.TextAttribute" /></summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns>The text of the value.</returns>
      <requires csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        new TomsToolbox.Wpf.Converters.ObjectToTextConverter.&lt;&gt;c__DisplayClass3().key = key;&#xD;&#xA;    }&#xD;&#xA;    return value != null; })()" vb="(() =&gt; {&#xD;&#xA;    New TomsToolbox.Wpf.Converters.ObjectToTextConverter.&lt;&gt;c__DisplayClass3().key = key&#xD;&#xA;    return value &lt;&gt; Nothing; })()">(() =&gt; {
    {
        new TomsToolbox.Wpf.Converters.ObjectToTextConverter.&lt;&gt;c__DisplayClass3().key = key;
    }
    return value != null; })()</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.ObjectToTextConverter.Convert(System.Object,System.Object,System.Type)">
      <summary>
            Converts the specified value to the text taken from it's <see cref="T:TomsToolbox.Core.TextAttribute" /></summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <param name="enumType">An optional type of an enum to support converting <see cref="T:System.Enum" /> where the value is given as a number or string.</param>
      <returns>The text of the value.</returns>
      <requires csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        new TomsToolbox.Wpf.Converters.ObjectToTextConverter.&lt;&gt;c__DisplayClass8().key = key;&#xD;&#xA;    }&#xD;&#xA;    return value != null; })()" vb="(() =&gt; {&#xD;&#xA;    New TomsToolbox.Wpf.Converters.ObjectToTextConverter.&lt;&gt;c__DisplayClass8().key = key&#xD;&#xA;    return value &lt;&gt; Nothing; })()">(() =&gt; {
    {
        new TomsToolbox.Wpf.Converters.ObjectToTextConverter.&lt;&gt;c__DisplayClass8().key = key;
    }
    return value != null; })()</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:TomsToolbox.Wpf.Converters.ReplaceTextConverter">
      <summary>
            A converter that converts the specified value by replacing text using a regular expression.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.ReplaceTextConverter.Convert(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.Boolean)">
      <summary>
            Converts the specified value by replacing text using a regular expression.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="pattern">The regular expression to find.</param>
      <param name="replacement">The replacing text.</param>
      <param name="options">The options for the regular expression.</param>
      <param name="replaceAll">if set to <c>true</c> all occurrences will be replaces; otherwise only the first.</param>
      <returns>The converted value.</returns>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.ReplaceTextConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value.
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.ReplaceTextConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value.
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="P:TomsToolbox.Wpf.Converters.ReplaceTextConverter.Pattern">
      <summary>
            Gets or sets the regular expression to find.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Converters.ReplaceTextConverter.Replacement">
      <summary>
            Gets or sets the text to replace.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Converters.ReplaceTextConverter.Options">
      <summary>
            Gets or sets the <see cref="T:System.Text.RegularExpressions.RegexOptions" /> used to find the string.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Converters.ReplaceTextConverter.ReplaceAll">
      <summary>
            Gets or sets a value indicating whether to replace all found instances or only the first.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.Converters.ThicknessMultiplyConverter">
      <summary>
            Multiplies all corresponding members of two <see cref="T:System.Windows.Thickness" />. structures. 
            The first structure is passed as the converter value, the second as the converter parameter.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Converters.ThicknessMultiplyConverter.Default">
      <summary>
            The singleton instance of the converter.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.ThicknessMultiplyConverter.Multiply(System.Windows.Thickness,System.Windows.Thickness)">
      <summary>
            Multiplies all corresponding members of both structures.
            </summary>
      <param name="first">The first.</param>
      <param name="second">The second.</param>
      <returns>The multiplied thickness.</returns>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.ThicknessMultiplyConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. 
            </summary>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.ThicknessMultiplyConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. 
            </summary>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
    </member>
    <member name="T:TomsToolbox.Wpf.Converters.TypeConverterConverter">
      <summary>
            A <see cref="T:System.Windows.Data.IValueConverter" /> wrapping a <see cref="T:System.ComponentModel.TypeConverter" /></summary>
      <invariant>_typeConverter != null</invariant>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.TypeConverterConverter.#ctor(System.ComponentModel.TypeConverter)">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.Converters.TypeConverterConverter" /> class.
            </summary>
      <param name="typeConverter">The type converter.</param>
      <requires csharp="typeConverter != null" vb="typeConverter &lt;&gt; Nothing">typeConverter != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.TypeConverterConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. 
            </summary>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.TypeConverterConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. 
            </summary>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
    </member>
    <member name="T:TomsToolbox.Wpf.Converters.VisibilityToBooleanConverter">
      <summary>
            The counterpart of BooleanToVisibilityConverter.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Converters.VisibilityToBooleanConverter.Default">
      <summary>
            The singleton instance of the converter.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.VisibilityToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value.
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.VisibilityToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value.
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
    </member>
    <member name="T:TomsToolbox.Wpf.DelegateCommand`1">
      <summary>
            A simple, straight forward delegate command implementation. For usage see MVVM concepts.
            </summary>
      <typeparam name="T">The type of the command parameter.</typeparam>
    </member>
    <member name="M:TomsToolbox.Wpf.DelegateCommand`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.DelegateCommand`1" /> class.
            <para />
            No callback is initially set, so they must be set via the property setters. This usage generates easy readable code even if the delegates are inlined.
            </summary>
      <example>
        <code language="C#"><![CDATA[
            public ICommand DeleteCommand
            {
                get
                {
                    return new DelegateCommand<Item>
                    {
                        CanExecuteCallback = item => 
                        {
                            return IsSomethingSelected(item);
                        },
                        ExecuteCallback = item =>
                        {
                            if (IsSomehingSelected(item))
                            {
                                DelteTheSelection();
                            }
                        }
                    };
                }
            }
            ]]></code>
      </example>
    </member>
    <member name="M:TomsToolbox.Wpf.DelegateCommand`1.#ctor(System.Action{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.DelegateCommand`1" /> class with the execute callback.
            <para />
            This version generates more compact code; not recommended for in-line delegates.
            </summary>
      <param name="executeCallback">The default execute callback.</param>
      <example>
        <code language="C#"><![CDATA[
            public ICommand AboutCommand
            {
                get
                {
                    return new DelegateCommand<Item>(item => ShowAboutBox(item));
                }
            }
            ]]></code>
      </example>
    </member>
    <member name="M:TomsToolbox.Wpf.DelegateCommand`1.#ctor(System.Predicate{`0},System.Action{`0})">
      <summary>
             Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.DelegateCommand`1" /> class.
             </summary>
      <param name="canExecuteCallback">The default can execute callback.</param>
      <param name="executeCallback">The default execute callback.</param>
      <example>
        <code language="C#"><![CDATA[
             public ICommand EditCommand
             {
                 get
                 {
                     return new DelegateCommand<Item>(CanEdit, Edit);
                 }
             }
            
             public bool CanEdit(Item param)
             {
                 .....
             ]]></code>
      </example>
    </member>
    <member name="M:TomsToolbox.Wpf.DelegateCommand`1.CanExecute(System.Object)">
      <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
      <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
      <returns>
            true if this command can be executed; otherwise, false.
            </returns>
    </member>
    <member name="M:TomsToolbox.Wpf.DelegateCommand`1.Execute(System.Object)">
      <summary>
            Defines the method to be called when the command is invoked.
            </summary>
      <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
    </member>
    <member name="P:TomsToolbox.Wpf.DelegateCommand`1.CanExecuteCallback">
      <summary>
            Gets or sets the predicate to handle the ICommand.CanExecute method.
            If unset, ICommand.CanExecute will always return true if ExecuteCallback is set.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.DelegateCommand`1.ExecuteCallback">
      <summary>
            Gets or sets the action to handle the ICommand.Execute method.
            If unset, ICommand.CanExecute will always return false.
            </summary>
    </member>
    <member name="E:TomsToolbox.Wpf.DelegateCommand`1.CanExecuteChanged">
      <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
      <remarks>
            The event is forwarded to the <see cref="T:System.Windows.Input.CommandManager" />, so visuals bound to the delegate command will be updated
            in sync with the system. To explicitly refresh all visuals call CommandManager.InvalidateRequerySuggested();
            </remarks>
    </member>
    <member name="T:TomsToolbox.Wpf.DelegateCommand">
      <summary>
            A simple, straight forward delegate command implementation that does not make use of the command parameter. 
            For usage see MVVM concepts.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.DelegateCommand.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.DelegateCommand" /> class.
            <para />
            No callback is initially set, so they must be set via the property setters. This usage generates easy readable code even if the delegates are inlined.
            </summary>
      <example>
        <code language="C#"><![CDATA[
            public ICommand DeleteCommand
            {
                get
                {
                    return new DelegateCommand
                    {
                        CanExecuteCallback = delegate
                        {
                            return IsSomethingSelected();
                        },
                        ExecuteCallback = delegate
                        {
                            if (IsSomehingSelected())
                            {
                                DelteTheSelection();
                            }
                        }
                    };
                }
            }
            ]]></code>
      </example>
    </member>
    <member name="M:TomsToolbox.Wpf.DelegateCommand.#ctor(System.Action)">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.DelegateCommand" /> class with the execute callback.
            <para />
            This version generates more compact code; not recommended for in-line delegates.
            </summary>
      <param name="executeCallback">The default execute callback.</param>
      <example>
        <code language="C#"><![CDATA[
            public ICommand AboutCommand
            {
                get
                {
                    return new DelegateCommand(ShowAboutBox);
                }
            }
            ]]></code>
      </example>
      <requires csharp="executeCallback != null" vb="executeCallback &lt;&gt; Nothing">executeCallback != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.DelegateCommand.#ctor(System.Func{System.Boolean},System.Action)">
      <summary>
             Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.DelegateCommand" /> class.
             </summary>
      <param name="canExecuteCallback">The default can execute callback.</param>
      <param name="executeCallback">The default execute callback.</param>
      <example>
        <code language="C#"><![CDATA[
             public ICommand EditCommand
             {
                 get
                 {
                     return new DelegateCommand(CanEdit, Edit);
                 }
             }
            
             public bool CanEdit()
             {
                 .....
             ]]></code>
      </example>
    </member>
    <member name="M:TomsToolbox.Wpf.DelegateCommand.CanExecute(System.Object)">
      <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
      <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
      <returns>
            true if this command can be executed; otherwise, false.
            </returns>
    </member>
    <member name="M:TomsToolbox.Wpf.DelegateCommand.Execute(System.Object)">
      <summary>
            Defines the method to be called when the command is invoked.
            </summary>
      <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
    </member>
    <member name="P:TomsToolbox.Wpf.DelegateCommand.CanExecuteCallback">
      <summary>
            Gets or sets the predicate to handle the ICommand.CanExecute method.
            If unset, ICommand.CanExecute will always return true if ExecuteCallback is set.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.DelegateCommand.ExecuteCallback">
      <summary>
            Gets or sets the action to handle the ICommand.Execute method.
            If unset, ICommand.CanExecute will always return false.
            </summary>
    </member>
    <member name="E:TomsToolbox.Wpf.DelegateCommand.CanExecuteChanged">
      <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
      <remarks>
            The event is forwarded to the <see cref="T:System.Windows.Input.CommandManager" />, so visuals bound to the delegate command will be updated
            in sync with the system. To explicitly refresh all visuals call CommandManager.InvalidateRequerySuggested();
            </remarks>
    </member>
    <member name="T:TomsToolbox.Wpf.ImageExtensions">
      <summary>
            Extension for the <see cref="T:System.Windows.Controls.Image" /> class:
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.ImageExtensions.GetResourceKey(System.Windows.Controls.Image)">
      <summary>
            Gets the resource key from which to load the image source.
            </summary>
      <param name="obj">The image.</param>
      <returns>The resource key.</returns>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.ImageExtensions.SetResourceKey(System.Windows.Controls.Image,System.Object)">
      <summary>
            Sets the resource key from which to load the image source.
            </summary>
      <param name="obj">The image.</param>
      <param name="value">The resource key.</param>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="F:TomsToolbox.Wpf.ImageExtensions.ResourceKeyProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.ImageExtensions.ResourceKey" /> dependency property.
            </summary>
      <AttachedPropertyComments>
        <summary>Allows to specify a resource key instead of an Uri as the source from which the image will be loaded.</summary>
      </AttachedPropertyComments>
    </member>
    <member name="T:TomsToolbox.Wpf.ItemsControlExtensions">
      <summary>
            Extensions and helpers for the <see cref="T:System.Windows.Controls.ItemsControl" /> or derived classes.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.ItemsControlExtensions.GetDefaultItemCommand(System.Windows.Controls.ItemsControl)">
      <summary>
            Gets the default item command. See <see cref="P:TomsToolbox.Wpf.ItemsControlExtensions.DefaultItemCommand" /> attached property for details.
            </summary>
      <param name="obj">The object.</param>
      <returns>The command.</returns>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.ItemsControlExtensions.SetDefaultItemCommand(System.Windows.Controls.ItemsControl,System.Windows.Input.ICommand)">
      <summary>
            Sets the default item command. See <see cref="P:TomsToolbox.Wpf.ItemsControlExtensions.DefaultItemCommand" /> attached property for details.
            </summary>
      <param name="obj">The object.</param>
      <param name="value">The command.</param>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="F:TomsToolbox.Wpf.ItemsControlExtensions.DefaultItemCommandProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.ItemsControlExtensions.DefaultItemCommand" /> attached property
            </summary>
      <AttachedPropertyComments>
        <summary>
            The default item command is the command that will be executed when an item of the items control has received a mouse double click or enter key. 
            It is not executed when the double-click is on the background or on the scrollbar.
            This command avoids the ubiquitous wrong implementations as well as code duplication when handling double-clicks in items controls like the <see cref="T:System.Windows.Controls.ListBox" /><para />
            The command parameter for the command is the item that has been clicked.
            </summary>
      </AttachedPropertyComments>
    </member>
    <member name="M:TomsToolbox.Wpf.ItemsControlExtensions.GetRefreshOnSourceChanges(System.Windows.Controls.ItemsControl)">
      <summary>
            Gets the object that will be observed for changes. 
            A change of the object will trigger a refresh on the collection view of the attached items control.
            </summary>
      <param name="obj">The <see cref="T:System.Windows.Controls.ItemsControl" /> to refresh.</param>
      <returns>The object to observe.</returns>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.ItemsControlExtensions.SetRefreshOnSourceChanges(System.Windows.Controls.ItemsControl,System.Object)">
      <summary>
            Sets the object that will be observed for changes. 
            A change of the object will trigger a refresh on the collection view of the attached items control.
            </summary>
      <param name="obj">The <see cref="T:System.Windows.Controls.ItemsControl" /> to refresh.</param>
      <param name="value">The object to observe.</param>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="F:TomsToolbox.Wpf.ItemsControlExtensions.RefreshOnSourceChangesProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.ItemsControlExtensions.RefreshOnSourceChanges" /> attached property
            </summary>
      <AttachedPropertyComments>
        <summary>
            The object that will be observed for changes. A change of the object will trigger a refresh on the collection view of the attached items control.
            </summary>
      </AttachedPropertyComments>
    </member>
    <member name="T:TomsToolbox.Wpf.Controls.ViewportCanvas">
      <summary>
            A canvas that transforms the coordinates of it's children to the own visual before arranging them. 
            It is used to have an overlay of non-scaled object on top of a scaled object, where the coordinates of the overlay objects are expressed in the coordinate system 
            of the scaled object (<see cref="P:TomsToolbox.Wpf.Controls.ViewportCanvas.World" />). One major use case are e.g. pin points on a map, where the map scales, while the pin points only move but keep their size.
            While the <see cref="T:System.Windows.Controls.Canvas" /> only accepts one of <see cref="P:System.Windows.Controls.Canvas.Left" />/<see cref="P:System.Windows.Controls.Canvas.Right" /> 
            or <see cref="P:System.Windows.Controls.Canvas.Top" />/<see cref="P:System.Windows.Controls.Canvas.Bottom" />, 
            with the ViewportCanvas you can specify both to stretch the object accordingly to the transformation.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.ViewportCanvas.WorldProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.ViewportCanvas.World" /> dependency property.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Controls.ViewportCanvas.MeasureOverride(System.Windows.Size)">
      <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class.
            </summary>
      <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
      <returns>
            The size that this element determines it needs during layout, based on its calculations of child element sizes.
            </returns>
      <requires inheritedFrom="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" inheritedFromTypeName="FrameworkElement" csharp="(!availableSize.IsEmpty ? !IsNaN(availableSize.Width) : !true) &amp;&amp; !IsNaN(availableSize.Height)" vb="(Not availableSize.IsEmpty ? Not IsNaN(availableSize.Width) : Not True) AndAlso Not IsNaN(availableSize.Height)">(!availableSize.IsEmpty ? !double.IsNaN(availableSize.Width) : !true) &amp;&amp; !double.IsNaN(availableSize.Height)</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.Controls.ViewportCanvas.ArrangeOverride(System.Windows.Size)">
      <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" /> derived class.
            </summary>
      <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
      <returns>
            The actual size used.
            </returns>
      <requires inheritedFrom="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" inheritedFromTypeName="FrameworkElement" csharp="(!finalSize.IsEmpty ? !IsNaN(finalSize.Width) : !true ? !IsNaN(finalSize.Height) ? !IsPositiveInfinity(finalSize.Width) : !true : !true) &amp;&amp; !IsPositiveInfinity(finalSize.Height)" vb="(Not finalSize.IsEmpty ? Not IsNaN(finalSize.Width) : Not True ? Not IsNaN(finalSize.Height) ? Not IsPositiveInfinity(finalSize.Width) : Not True : Not True) AndAlso Not IsPositiveInfinity(finalSize.Height)">(!finalSize.IsEmpty ? !double.IsNaN(finalSize.Width) : !true ? !double.IsNaN(finalSize.Height) ? !double.IsPositiveInfinity(finalSize.Width) : !true : !true) &amp;&amp; !double.IsPositiveInfinity(finalSize.Height)</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.Controls.ViewportCanvas.Invalidate">
      <summary>
            Invalidates the layout of this instance.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.ViewportCanvas.World">
      <summary>
            Gets or sets the physical layer. The children's coordinates are assumed to be relative to the physical layer.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.ListCollectionViewListAdapter`1">
      <summary>
            Adapter for a <see cref="T:System.Windows.Data.ListCollectionView" /> that exposes the content as a read-only collection with an IList interface.
            </summary>
      <typeparam name="T">The type of elements in the collection.</typeparam>
      <invariant>_collectionView != null</invariant>
    </member>
    <member name="M:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.#ctor(System.Windows.Data.ListCollectionView)">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.ListCollectionViewListAdapter`1" /> class.
            </summary>
      <param name="collectionView">The collection view.</param>
      <requires csharp="collectionView != null" vb="collectionView &lt;&gt; Nothing">collectionView != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.Contains(`0)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.Contains(`0)" inheritedFromTypeName="ICollection" csharp="result ⇒ this.Count &gt; 0" vb="result Implies Me.Count &gt; 0">!result || this.Count &gt; 0</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.IndexOf(`0)">
      <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
      <ensures inheritedFrom="M:System.Collections.Generic.IList`1.IndexOf(`0)" inheritedFromTypeName="IList" csharp="result &gt;= -1" vb="result &gt;= -1">result &gt;= -1</ensures>
      <ensures inheritedFrom="M:System.Collections.Generic.IList`1.IndexOf(`0)" inheritedFromTypeName="IList" csharp="result &lt; this.Count" vb="result &lt; Me.Count">result &lt; this.Count</ensures>
    </member>
    <member name="P:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.CollectionView">
      <summary>
            Gets the underlying collection view.
            </summary>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <getter>
        <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.get_Count" inheritedFromTypeName="ICollection" csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
        <ensures inheritedFrom="M:System.Collections.ICollection.get_Count" inheritedFromTypeName="ICollection" csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
      </getter>
    </member>
    <member name="P:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="index">The index.</param>
      <returns />
      <getter>
        <requires inheritedFrom="M:System.Collections.Generic.IList`1.get_Item(System.Int32)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
        <requires inheritedFrom="M:System.Collections.Generic.IList`1.get_Item(System.Int32)" inheritedFromTypeName="IList" csharp="index &lt; this.Count" vb="index &lt; Me.Count">index &lt; this.Count</requires>
      </getter>
      <setter>
        <requires inheritedFrom="M:System.Collections.Generic.IList`1.set_Item(System.Int32,`0)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
        <requires inheritedFrom="M:System.Collections.Generic.IList`1.set_Item(System.Int32,`0)" inheritedFromTypeName="IList" csharp="index &lt; this.Count" vb="index &lt; Me.Count">index &lt; this.Count</requires>
      </setter>
    </member>
    <member name="P:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.IsFixedSize">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.
            </summary>
    </member>
    <member name="E:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="E:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.CollectionChanged">
      <summary>
            Occurs when the collection changes.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.MultiSelectorExtensions">
      <summary>
            Extensions for multi selectors like ListBox or DataGrid:
            <list type="bullet"><item>Support binding operations with SelectedItems property.</item></list></summary>
      <remarks>
            SelectionBinding:
            <para />
            Since there is no common interface for ListBox and DataGrid, the SelectionBinding is implemented via reflection/dynamics, so it will
            work on any FrameworkElement that has the SelectedItems, SelectedItem and SelectedItemIndex properties and the SelectionChanged event.
            </remarks>
    </member>
    <member name="M:TomsToolbox.Wpf.MultiSelectorExtensions.GetSelectionBinding(System.Windows.Controls.Primitives.Selector)">
      <summary>
            Gets the value of the <see cref="P:TomsToolbox.Wpf.MultiSelectorExtensions.SelectionBinding" /> attached property.
            </summary>
      <param name="obj">The object to attach to.</param>
      <returns>The current selection.</returns>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.MultiSelectorExtensions.SetSelectionBinding(System.Windows.Controls.Primitives.Selector,System.Collections.IList)">
      <summary>
            Sets the value of the <see cref="P:TomsToolbox.Wpf.MultiSelectorExtensions.SelectionBinding" /> attached property.
            </summary>
      <param name="obj">The object to attach to.</param>
      <param name="value">The new selection.</param>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="F:TomsToolbox.Wpf.MultiSelectorExtensions.SelectionBindingProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.MultiSelectorExtensions.SelectionBinding" /> dependency property.
            </summary>
      <AttachedPropertyComments>
        <summary>
            Attach this property to a ListBox or DataGrid to bind the selectors SelectedItems property to the view models SelectedItems property.
            </summary>
        <example>
            If your view model has two properties "AnyList Items { get; }" and "IList SelectedItems { get; set; }" your XAML looks like this:
            <para /><code><![CDATA[
            <ListBox ItemsSource="{Binding Path=Items}" core:MultiSelectorExtensions.SelectionBinding="{Binding Path=SelectedItems}"/>
            ]]></code></example>
      </AttachedPropertyComments>
    </member>
    <member name="T:TomsToolbox.Wpf.DependencyObjectExtensions">
      <summary>
            Extensions methods to ease dealing with dependency objects.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.GetWindowHandle(System.Windows.DependencyObject)">
      <summary>
            Gets the window handle of the HwndSource hosting this item.
            </summary>
      <param name="self">The item.</param>
      <returns>The window handle, if the item is part of a valid visual tree, otherwise IntPtr.Zero.</returns>
      <requires csharp="self != null" vb="self &lt;&gt; Nothing">self != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.GetRootVisual(System.Windows.DependencyObject)">
      <summary>
            Gets the root visual for the item.
            </summary>
      <param name="item">The item to find the root visual for.</param>
      <returns>The root visual.</returns>
      <exception cref="T:System.ArgumentException">The item is not part of a valid visual tree.</exception>
      <remarks>
            If the item is inside a control that's embedded in a native or WindowsForms window, the root visual
            is <c>not</c> a <see cref="T:System.Windows.Window" />.
            </remarks>
      <requires csharp="item != null" vb="item &lt;&gt; Nothing">item != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.TryGetRootVisual(System.Windows.DependencyObject)">
      <summary>
            Gets the root visual for the item.
            </summary>
      <param name="item">The item to find the root visual for.</param>
      <returns>The root visual if the item is part of a valid visual tree; otherwise <c>null</c>.
            </returns>
            /// <remarks>
            If the item is inside a control that's embedded in a native or WindowsForms window, the root visual
            is <c>not</c> a <see cref="T:System.Windows.Window" />.
            </remarks><requires csharp="item != null" vb="item &lt;&gt; Nothing">item != null</requires></member>
    <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.AncestorsAndSelf(System.Windows.DependencyObject)">
      <summary>
            Returns an enumeration of elements that contain this element, and the ancestors of this element.
            </summary>
      <param name="self">The starting element.</param>
      <returns>The ancestor list.</returns>
      <requires csharp="self != null" vb="self &lt;&gt; Nothing">self != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.Ancestors(System.Windows.DependencyObject)">
      <summary>
            Returns an enumeration of the ancestor elements of this element.
            </summary>
      <param name="self">The starting element.</param>
      <returns>The ancestor list.</returns>
      <requires csharp="self != null" vb="self &lt;&gt; Nothing">self != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.TryFindAncestorOrSelf``1(System.Windows.DependencyObject)">
      <summary>
            Returns the first element in the ancestor list that implements the type of the type parameter.
            </summary>
      <typeparam name="T">The type of element to return.</typeparam>
      <param name="self">The starting element.</param>
      <returns>The first element matching the criteria, or null if no element was found.</returns>
      <requires csharp="self != null" vb="self &lt;&gt; Nothing">self != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.TryFindAncestorOrSelf``1(System.Windows.DependencyObject,System.Func{``0,System.Boolean})">
      <summary>
            Returns the first element in the ancestor list that implements the type of the type parameter.
            </summary>
      <typeparam name="T">The type of element to return.</typeparam>
      <param name="self">The starting element.</param>
      <param name="match">The predicate to match.</param>
      <returns>The first element matching the criteria, or null if no element was found.</returns>
      <requires csharp="self != null" vb="self &lt;&gt; Nothing">self != null</requires>
      <requires csharp="match != null" vb="match &lt;&gt; Nothing">match != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.TryFindAncestor``1(System.Windows.DependencyObject)">
      <summary>
            Returns the first element in the ancestor list that implements the type of the type parameter.
            </summary>
      <typeparam name="T">The type of element to return.</typeparam>
      <param name="self">The starting element.</param>
      <returns>The first element matching the criteria, or null if no element was found.</returns>
      <requires csharp="self != null" vb="self &lt;&gt; Nothing">self != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.TryFindAncestor``1(System.Windows.DependencyObject,System.Func{``0,System.Boolean})">
      <summary>
            Returns the first element in the ancestor list that implements the type of the type parameter.
            </summary>
      <typeparam name="T">The type of element to return.</typeparam>
      <param name="self">The starting element.</param>
      <param name="match">The predicate to match.</param>
      <returns>The first element matching the criteria, or null if no element was found.</returns>
      <requires csharp="self != null" vb="self &lt;&gt; Nothing">self != null</requires>
      <requires csharp="match != null" vb="match &lt;&gt; Nothing">match != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.VisualChildren(System.Windows.DependencyObject)">
      <summary>
            Enumerates the immediate children of the specified item.
            </summary>
      <param name="item">The item.</param>
      <returns>The immediate children of the specified item.</returns>
      <remarks>
            Uses <see cref="M:System.Windows.Media.VisualTreeHelper.GetChildrenCount(System.Windows.DependencyObject)" /> and <see cref="M:System.Windows.Media.VisualTreeHelper.GetChild(System.Windows.DependencyObject,System.Int32)" />.
            </remarks>
      <requires csharp="item != null" vb="item &lt;&gt; Nothing">item != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.VisualChildrenAndSelf(System.Windows.DependencyObject)">
      <summary>
            Enumerates the specified item and it's immediate children.
            </summary>
      <param name="item">The item.</param>
      <returns>The specified item and it's immediate.</returns>
      <remarks>
            Uses <see cref="M:System.Windows.Media.VisualTreeHelper.GetChildrenCount(System.Windows.DependencyObject)" /> and <see cref="M:System.Windows.Media.VisualTreeHelper.GetChild(System.Windows.DependencyObject,System.Int32)" />.
            </remarks>
      <requires csharp="item != null" vb="item &lt;&gt; Nothing">item != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.VisualDescendants(System.Windows.DependencyObject)">
      <summary>
            Enumerates all visuals descendants of the specified item.
            </summary>
      <param name="item">The item.</param>
      <returns>The descendants of the item.</returns>
      <remarks>
            Uses <see cref="M:System.Windows.Media.VisualTreeHelper.GetChildrenCount(System.Windows.DependencyObject)" /> and <see cref="M:System.Windows.Media.VisualTreeHelper.GetChild(System.Windows.DependencyObject,System.Int32)" />.
            </remarks>
      <requires csharp="item != null" vb="item &lt;&gt; Nothing">item != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.VisualDescendantsAndSelf(System.Windows.DependencyObject)">
      <summary>
            Enumerates the specified item and all it's visual descendants.
            </summary>
      <param name="item">The item.</param>
      <returns>The specified item and all it's visual descendants.</returns>
      <remarks>
            Uses <see cref="M:System.Windows.Media.VisualTreeHelper.GetChildrenCount(System.Windows.DependencyObject)" /> and <see cref="M:System.Windows.Media.VisualTreeHelper.GetChild(System.Windows.DependencyObject,System.Int32)" />.
            </remarks>
      <requires csharp="item != null" vb="item &lt;&gt; Nothing">item != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.GetExtent(System.Windows.Thickness)">
      <summary>
            Gets the extent of the thickness when applied to an empty rectangle.
            </summary>
      <param name="value">The thickness.</param>
      <returns>The extent of the thickness.</returns>
      <remarks>
            Returns a <see cref="T:System.Windows.Vector" /> because <see cref="T:System.Windows.Thickness" /> allows negative values.
            </remarks>
    </member>
    <member name="T:TomsToolbox.Wpf.NullCommand">
      <summary>
            A <see cref="T:System.Windows.Input.ICommand" /> implementation that does nothing and can't be executed. 
            </summary>
      <remarks>
            Useful as fallback for command bindings, since a binding to <c>null</c> will leave the bound control enabled.
            </remarks>
    </member>
    <member name="F:TomsToolbox.Wpf.NullCommand.Default">
      <summary>
            The singleton instance of the command.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.NullCommand.Execute(System.Object)">
      <summary>
            Defines the method to be called when the command is invoked.
            </summary>
      <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
    </member>
    <member name="M:TomsToolbox.Wpf.NullCommand.CanExecute(System.Object)">
      <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
      <returns>
            true if this command can be executed; otherwise, false.
            </returns>
      <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
      <ensures csharp="!result" vb="Not result">!result</ensures>
    </member>
    <member name="E:TomsToolbox.Wpf.NullCommand.CanExecuteChanged">
      <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.PresentationFrameworkExtensions">
      <summary>
            Common extension methods for presentation framework objects.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.PresentationFrameworkExtensions.GetCenter(System.Windows.Rect)">
      <summary>
            Gets the center point of the specified rectangle.
            </summary>
      <param name="rect">The rectangle.</param>
      <returns>The center point.</returns>
    </member>
    <member name="M:TomsToolbox.Wpf.PresentationFrameworkExtensions.Translate(System.Windows.Rect,System.Windows.Media.Visual,System.Windows.Media.Visual)">
      <summary>
            Translates the coordinates of the specified rectangle from the first visual to the second visual.
            </summary>
      <param name="rect">The rectangle.</param>
      <param name="from">The visual for which the rectangle coordinates are specified.</param>
      <param name="to">The visual to which the rectangle coordinates are translated.</param>
      <returns>The translated rectangle</returns>
      <requires csharp="from != null" vb="from &lt;&gt; Nothing">from != null</requires>
      <requires csharp="to != null" vb="to &lt;&gt; Nothing">to != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.PresentationFrameworkExtensions.Translate(System.Windows.Point,System.Windows.UIElement,System.Windows.UIElement)">
      <summary>
            Translates the coordinates of the specified point from the first visual to the second visual.
            </summary>
      <param name="point">The point.</param>
      <param name="from">The visual for which the point coordinates are specified.</param>
      <param name="to">The visual to which the point coordinates are translated.</param>
      <returns>The translated point</returns>
      <requires csharp="from != null" vb="from &lt;&gt; Nothing">from != null</requires>
      <requires csharp="to != null" vb="to &lt;&gt; Nothing">to != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.PresentationFrameworkExtensions.GetClientRect(System.Windows.FrameworkElement)">
      <summary>
            Gets the client rectangle of the framework element. 
            </summary>
      <param name="self">The framework element for which to retrieve the client rectangle.</param>
      <returns>The client rectangle</returns>
      <requires csharp="self != null" vb="self &lt;&gt; Nothing">self != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.PresentationFrameworkExtensions.GetClientRect(System.Windows.FrameworkElement,System.Windows.Media.Visual)">
      <summary>
            Gets the client rectangle of the framework element translated to another visual.
            </summary>
      <param name="self">The framework element for which to retrieve the client rectangle.</param>
      <param name="relativeTo">The visual to which the rectangle coordinates are translated.</param>
      <returns>
            The client rectangle relative to the visual.
            </returns>
      <requires csharp="self != null" vb="self &lt;&gt; Nothing">self != null</requires>
      <requires csharp="relativeTo != null" vb="relativeTo &lt;&gt; Nothing">relativeTo != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.PresentationFrameworkExtensions.GetExtent(System.Windows.FrameworkElement)">
      <summary>
            Gets the extent of the framework element.
            </summary>
      <param name="self">The framework element for which to retrieve the extent.</param>
      <returns>The extent.</returns>
      <requires csharp="self != null" vb="self &lt;&gt; Nothing">self != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.PresentationFrameworkExtensions.GetExtent(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
      <summary>
            Gets the extent of the framework element translated to another visual.
            </summary>
      <param name="self">The framework element for which to retrieve the extent.</param>
      <param name="relativeTo">The visual to which the extent is translated.</param>
      <returns>
            The extent relative to the visual.
            </returns>
      <requires csharp="self != null" vb="self &lt;&gt; Nothing">self != null</requires>
      <requires csharp="relativeTo != null" vb="relativeTo &lt;&gt; Nothing">relativeTo != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.PresentationFrameworkExtensions.GetPhysicalPixelSize(System.Windows.FrameworkElement)">
      <summary>
            Gets the physical size of one pixel in design units.
            </summary>
      <param name="self">The framework element used to get the presentation source.</param>
      <returns>The physical size of one pixel in design units.</returns>
      <exception cref="T:System.ArgumentException">The framework element is not loaded in the visual tree.</exception>
      <requires csharp="self != null" vb="self &lt;&gt; Nothing">self != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.PresentationFrameworkExtensions.GetDesignUnitSize(System.Windows.FrameworkElement)">
      <summary>
            Gets the physical size of one design unit in pixels.
            </summary>
      <param name="self">The framework element used to get the presentation source.</param>
      <returns>The physical size of one design unit in pixels.</returns>
      <exception cref="T:System.ArgumentException">The framework element is not loaded in the visual tree.</exception>
      <requires csharp="self != null" vb="self &lt;&gt; Nothing">self != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.PresentationFrameworkExtensions.MergeWith(System.Windows.Media.GeneralTransform,System.Windows.Media.GeneralTransform[])">
      <summary>
            Merges the first transformation with the second.
            </summary>
      <param name="first">The base transformation.</param>
      <param name="others">The transformations to merge.</param>
      <returns>The merged transformation.</returns>
      <requires csharp="first != null" vb="first &lt;&gt; Nothing">first != null</requires>
      <requires csharp="others != null" vb="others &lt;&gt; Nothing">others != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:TomsToolbox.Wpf.Controls.PixelSnapper">
      <summary>
            Moves the view port by fractional pixels, so the control's top left point is always aligned on a pixel boundary.
            See e.g. <see href="https://msdn.microsoft.com/de-de/library/aa970908.aspx" />.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Controls.PixelSnapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.Controls.PixelSnapper" /> class.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.PixelSnapper.ViewportProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.PixelSnapper.Viewport" /> dependency property
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.Controls.PixelSnapper.Invalidate">
      <summary>
            Invalidates the layout of this instance.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.PixelSnapper.Viewport">
      <summary>
            Gets or sets the view port displaying this control.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.PropertyBinding`1">
      <summary>
            Support binding to a property of an element when the target is not a <see cref="T:System.Windows.DependencyObject" /></summary>
      <typeparam name="T">The type of the variable.</typeparam>
      <invariant>_bindingHelper != null</invariant>
    </member>
    <member name="M:TomsToolbox.Wpf.PropertyBinding`1.#ctor(System.Object,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.PropertyBinding`1" /> class.
            </summary>
      <param name="source">The source.</param>
      <param name="path">The path.</param>
    </member>
    <member name="M:TomsToolbox.Wpf.PropertyBinding`1.#ctor(System.Object,System.Windows.PropertyPath)">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.PropertyBinding`1" /> class.
            </summary>
      <param name="source">The source.</param>
      <param name="propertyPath">The property path.</param>
    </member>
    <member name="M:TomsToolbox.Wpf.PropertyBinding`1.#ctor(System.Object,System.Windows.Data.BindingMode,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.PropertyBinding`1" /> class.
            </summary>
      <param name="source">The source.</param>
      <param name="mode">The mode.</param>
      <param name="path">The path.</param>
    </member>
    <member name="M:TomsToolbox.Wpf.PropertyBinding`1.#ctor(System.Object,System.Windows.Data.BindingMode,System.Windows.PropertyPath)">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.PropertyBinding`1" /> class.
            </summary>
      <param name="source">The source.</param>
      <param name="mode">The mode.</param>
      <param name="propertyPath">The property path.</param>
    </member>
    <member name="M:TomsToolbox.Wpf.PropertyBinding`1.Detach">
      <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.PropertyBinding`1.Value">
      <summary>
            Gets or sets the value.
            </summary>
    </member>
    <member name="E:TomsToolbox.Wpf.PropertyBinding`1.ValueChanged">
      <summary>
            Occurs when the value has changed.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.PropertyBindingValueChangedEventArgs`1">
      <summary>
            Event arguments for the <see cref="E:TomsToolbox.Wpf.PropertyBinding`1.ValueChanged" /> event.
            </summary>
      <typeparam name="T">The type of the variable.</typeparam>
    </member>
    <member name="M:TomsToolbox.Wpf.PropertyBindingValueChangedEventArgs`1.#ctor(`0,`0)">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.PropertyBindingValueChangedEventArgs`1" /> class.
            </summary>
      <param name="oldValue">The old value.</param>
      <param name="newValue">The new value.</param>
    </member>
    <member name="P:TomsToolbox.Wpf.PropertyBindingValueChangedEventArgs`1.OldValue">
      <summary>
            Gets the old value.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.PropertyBindingValueChangedEventArgs`1.NewValue">
      <summary>
            Gets the new value.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.SelectorExtensions">
      <summary>
            Extensions for the <see cref="T:System.Windows.Controls.Primitives.Selector" /></summary>
    </member>
    <member name="M:TomsToolbox.Wpf.SelectorExtensions.GetTrackSelection(System.Windows.DependencyObject)">
      <summary>
            Gets the value of the <see cref="P:TomsToolbox.Wpf.SelectorExtensions.TrackSelection" /> attached property.
            </summary>
      <param name="obj">The selector.</param>
      <returns>
        <c>true</c> if the selection should be tracked; otherwise <c>false</c>.</returns>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.SelectorExtensions.SetTrackSelection(System.Windows.DependencyObject,System.Boolean)">
      <summary>
            Sets the value of the <see cref="P:TomsToolbox.Wpf.SelectorExtensions.TrackSelection" /> attached property.
            </summary>
      <param name="obj">The object.</param>
      <param name="value">if set to <c>true</c> if the selection should be tracked; otherwise <c>false</c>.</param>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="F:TomsToolbox.Wpf.SelectorExtensions.TrackSelectionProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.SelectorExtensions.TrackSelection" /> attached property
            </summary>
      <AttachedPropertyComments>
        <summary>
            A value indicating whether selection should be tracked or not.
            </summary>
        <remarks>
            When a <see cref="T:System.Windows.Controls.Primitives.Selector" /> is embedded in a dynamic page, e.g. another selector, 
            the visual is recreated or reused with another data context whenever the page is displayed.
            <para />
            TrackSelection links the selected index with the view model (DataContext) of the selector, 
            restoring the cached index whenever the same view model is displayed. 
            If no index is cached, the first item will be selected.  
            </remarks>
      </AttachedPropertyComments>
    </member>
    <member name="T:TomsToolbox.Wpf.Controls.SharedWidthHeaderedContentControl">
      <summary>
            A headered content control with it's header on the left side. 
            Host in a panel with the <see cref="F:System.Windows.Controls.Grid.IsSharedSizeScopeProperty" /> set to <c>true</c> to use the same width for all headers.
            </summary>
      <example>
        <code language="XAML"><![CDATA[
            <StackPanel Grid.IsSharedSizeScope="True" >
              <SharedWidthHeaderedContentControl Header="Name:">
                <TextBox Text="{Binding Name}" />
              </SharedWidthHeaderedContentControl>
              <Decorator Height="10"/>
              <SharedWidthHeaderedContentControl Header="Description:">
                <TextBox Text="{Binding Description}" />
              </SharedWidthHeaderedContentControl>
            </StackPanel>]]></code>
        <code>
            This will look something like:
            
            Name:        [............]
            
            Description: [............]
            </code>
      </example>
    </member>
    <member name="F:TomsToolbox.Wpf.Controls.SharedWidthHeaderedContentControl.HeaderPaddingProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.SharedWidthHeaderedContentControl.HeaderPadding" /> dependency property
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.SharedWidthHeaderedContentControl.HeaderPadding">
      <summary>
            Gets or sets the padding applied to the header.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.InputBindingTemplate">
      <summary>
            A container to host the source <see cref="T:System.Windows.Input.InputBindingCollection" />. Must be a <see cref="T:System.Windows.FrameworkElement" /> to minimize binding errors.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.StyleBindings">
      <summary>
            Extensions to support style binding of some read only collection properties.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.StyleBindings.GetInputBindings(System.Windows.DependencyObject)">
      <summary>
            Gets the inputBindings attached via the <see cref="P:TomsToolbox.Wpf.StyleBindings.InputBindings" /> attached property.
            </summary>
      <param name="obj">The object the inputBindings are attached to.</param>
      <returns>The inputBindings.</returns>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.StyleBindings.SetInputBindings(System.Windows.DependencyObject,TomsToolbox.Wpf.InputBindingTemplate)">
      <summary>
            Sets the inputBindings attached via the <see cref="P:TomsToolbox.Wpf.StyleBindings.InputBindings" /> attached property.
            </summary>
      <param name="obj">The object the inputBindings are attached to.</param>
      <param name="value">The inputBindings to attach.</param>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="F:TomsToolbox.Wpf.StyleBindings.InputBindingsProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.StyleBindings.InputBindings" /> attached property.
            </summary>
      <AttachedPropertyComments>
        <summary>
            This property is needed to set <see cref="P:System.Windows.UIElement.InputBindings" /> via a <see cref="T:System.Windows.Style" /></summary>
        <example>
          <code language="XAML"><![CDATA[
            <Style TargetType="ListBoxItem">
              <Setter Property="wpf:StyleBindings.InputBindings">
                <Setter.Value>
                  <wpf:InputBindingTemplate>
                    <KeyBinding .... />
                    <MouseBinding .... />
                  </core:InputBindingTemplate>
                </Setter.Value>
              </Setter>
            ]]></code>
        </example>
      </AttachedPropertyComments>
    </member>
    <member name="M:TomsToolbox.Wpf.StyleBindings.GetGroupStyle(System.Windows.DependencyObject)">
      <summary>
            Gets the group style attached via the <see cref="P:TomsToolbox.Wpf.StyleBindings.GroupStyle" /> attached property.
            </summary>
      <param name="obj">The object the group style is attached to.</param>
      <returns>The group style.</returns>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.StyleBindings.SetGroupStyle(System.Windows.DependencyObject,System.Windows.Controls.GroupStyle)">
      <summary>
            Sets the group style attached via the <see cref="P:TomsToolbox.Wpf.StyleBindings.GroupStyle" /> attached property.
            </summary>
      <param name="obj">The object the group style is attached to.</param>
      <param name="value">The group style.</param>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="F:TomsToolbox.Wpf.StyleBindings.GroupStyleProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.StyleBindings.GroupStyle" /> attached property.
            </summary>
      <AttachedPropertyComments>
        <summary>
            This property is needed to set <see cref="P:System.Windows.Controls.ItemsControl.GroupStyle" /> via a <see cref="T:System.Windows.Style" /></summary>
        <example>
          <code language="XAML"><![CDATA[
            <Style TargetType="ListBox">
              <Setter Property="wpf:StyleBindings.GroupStyle">
                <Setter.Value>
                  <GroupStyle>
                    < .... />
                  <GroupStyle>
                </Setter.Value>
              </Setter>
            ]]></code>
        </example>
      </AttachedPropertyComments>
    </member>
    <member name="T:TomsToolbox.Wpf.TextBlockHelper">
      <summary>
            Attached property provider which adds the read-only attached property <see cref="F:TomsToolbox.Wpf.TextBlockHelper.IsTextTrimmedProperty" /> to
            the framework's <see cref="T:System.Windows.Controls.TextBlock" /> control.
            Can be used to e.g. show a dynamic tool tip with the full text, that shows up only if the text is really trimmed.
            </summary>
      <remarks>
            Remember to use NotifyOnTargetUpdated=True for bindings, if you need the <see cref="T:TomsToolbox.Wpf.TextBlockHelper" /> to react to changes to the TextBlock.Text property!
            </remarks>
    </member>
    <member name="M:TomsToolbox.Wpf.TextBlockHelper.GetIsTextTrimmed(System.Windows.DependencyObject)">
      <summary>
            Gets the value of the <see cref="P:TomsToolbox.Wpf.TextBlockHelper.IsTextTrimmed" /> attached property.
            </summary>
      <param name="obj">The text block.</param>
      <returns>
        <c>true</c> if text trimmed inside the text block; otherwise <c>false</c></returns>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="F:TomsToolbox.Wpf.TextBlockHelper.IsTextTrimmedProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.TextBlockHelper.IsTextTrimmed" /> attached property
            </summary>
      <AttachedPropertyComments>
        <summary>
            If the <see cref="P:TomsToolbox.Wpf.TextBlockHelper.IsAutomaticToolTipEnabled" /> attached property is set to <c>true</c> on a text block, this property
            reflects if the text inside the text block is trimmed, i.e. not fully visible.
            </summary>
      </AttachedPropertyComments>
    </member>
    <member name="M:TomsToolbox.Wpf.TextBlockHelper.GetIsAutomaticToolTipEnabled(System.Windows.DependencyObject)">
      <summary>
            Gets a value indicating if the automatic tool tip is enabled on this text block or not.
            </summary>
      <param name="obj">The <see cref="T:System.Windows.Controls.TextBlock" /> to evaluate.</param>
      <returns>
        <c>true</c> if the automatic tool tip is enabled; otherwise <c>false</c></returns>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.TextBlockHelper.SetIsAutomaticToolTipEnabled(System.Windows.DependencyObject,System.Boolean)">
      <summary>
            Sets a value indicating if the automatic tool tip is enabled on this text block or not.
            </summary>
      <param name="obj">The <see cref="T:System.Windows.Controls.TextBlock" /> to evaluate.</param>
      <param name="value">
        <c>true</c> to enable the automatic tool tip; otherwise <c>false</c></param>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="F:TomsToolbox.Wpf.TextBlockHelper.IsAutomaticToolTipEnabledProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.TextBlockHelper.IsAutomaticToolTipEnabled" /> attached property.
            </summary>
      <AttachedPropertyComments>
        <summary>
            Set this property to <c>true</c> to enable automatic evaluation of the <see cref="P:TomsToolbox.Wpf.TextBlockHelper.IsTextTrimmed" /> attached property.
            This property is used by the style identified with the <see cref="F:TomsToolbox.Wpf.ResourceKeys.AutoToolTipTextBoxStyle" /> to display of a tool tip only if the text of the text block is trimmed.
            </summary>
      </AttachedPropertyComments>
    </member>
    <member name="M:TomsToolbox.Wpf.TextBlockHelper.TextBlock_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
      <summary>
            Event handler for TextBlock's SizeChanged routed event. Triggers evaluation of the IsTextTrimmed attached property.
            </summary>
      <param name="sender">Object where the event handler is attached</param>
      <param name="e">Event data</param>
    </member>
    <member name="M:TomsToolbox.Wpf.TextBlockHelper.Binding_TargetUpdated(System.Object,System.Windows.Data.DataTransferEventArgs)">
      <summary>
            Event handler for TextBlock's TargetUpdated routed event. Triggers evaluation of the
            IsTextTrimmed attached property.
            </summary>
      <param name="sender">Object where the event handler is attached</param>
      <param name="e">Event data</param>
    </member>
    <member name="M:TomsToolbox.Wpf.TextBlockHelper.UpdateIsTextTrimmed(System.Windows.Controls.TextBlock)">
      <summary>
            Update the value of IsTextTrimmed.
            </summary>
      <param name="textBlock">The text block</param>
      <requires csharp="textBlock != null" vb="textBlock &lt;&gt; Nothing">textBlock != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.TextBlockHelper.EvaluateIsTextTrimmed(System.Windows.Controls.TextBlock)">
      <summary>
            Determines whether or not the text in <paramref name="textBlock" /> is currently being trimmed due to width or height constraints.
            </summary>
      <param name="textBlock">The <see cref="T:System.Windows.Controls.TextBlock" /> to evaluate.</param>
      <returns>
        <c>true</c> if the text is currently being trimmed; otherwise <c>false</c></returns>
      <requires csharp="textBlock != null" vb="textBlock &lt;&gt; Nothing">textBlock != null</requires>
    </member>
    <member name="T:TomsToolbox.Wpf.ResourceKeys">
      <summary>
            A static class providing the resource keys for the theme resources.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.ResourceKeys.AutoToolTipTextBoxStyle">
      <summary>
            A style for text boxes that automatically sets the tool tip if the text is trimmed.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.ResourceKeys.SharedWidthContainerStyle">
      <summary>
            Resource key for a style applying a shared with to associated container controls.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.ResourceKeys.ListBoxItemCheckBoxStyle">
      <summary>
            List box/list view with check boxes: Style to be applied to the check box inside item or cell template. See e.g. http://msdn.microsoft.com/en-us/library/ms754143.aspx.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.ResourceKeys.DataGridRowCheckBoxStyle">
      <summary>
            Data grid with check boxes for row selection: Style to be applied to the check box inside the row header template.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.ResourceKeys.DataGridCellStyle">
      <summary>
            A copy of the original data grid cell style, extended with VerticalAlignment binding to control the vertical alignment of the content via the DataGrid.VerticalContentAlignment property. Also adds support for padding.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.ResourceKeys.ControlWithValidationErrorToolTipStyle">
      <summary>
            A control that shows validation errors in the tool tip.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.WhiteSpaces">
      <summary>
            Classifies white spaces in plain text.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.WhiteSpaces.None">
      <summary>
            No white space
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.WhiteSpaces.Paragraph">
      <summary>
            Paragraphs (i.e. line breaks)
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.WhiteSpaces.Space">
      <summary>
            Spaces
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.WhiteSpaces.Tab">
      <summary>
            Tab characters
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.WhiteSpaces.All">
      <summary>
            All white space
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator">
      <summary>
            Makes white space in text boxes visible.
            </summary>
      <example>
            Surround a <see cref="T:System.Windows.Controls.TextBox" /> with the decorator to make white space visible:<para /><code language="XAML"><![CDATA[
            <local:TextBoxVisibleWhiteSpaceDecorator WhiteSpaces="Paragraph,Space,Tab">
              <TextBox TextWrapping="Wrap" AcceptsReturn="True" AcceptsTab="True"/>
            </local:TextBoxVisibleWhiteSpaceDecorator>
            ]]></code></example>
      <invariant>_adornerDecorator != null</invariant>
      <invariant>_adornerLayer != null</invariant>
      <invariant>_adorners != null</invariant>
    </member>
    <member name="M:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator" /> class.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.WhiteSpacesProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.WhiteSpaces" /> dependency property
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.WhiteSpaceColorProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.WhiteSpaceColor" /> dependency property
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.WhiteSpaceOpacityProperty">
      <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.WhiteSpaceOpacity" /> dependency property
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.GetVisualChild(System.Int32)">
      <summary>
            Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)" />, and returns a child at the specified index from a collection of child elements.
            </summary>
      <param name="index">The zero-based index of the requested child element in the collection.</param>
      <returns>
            The requested child element. This should not return null; if the provided index is out of range, an exception is thrown.
            </returns>
    </member>
    <member name="M:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.MeasureOverride(System.Windows.Size)">
      <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class.
            </summary>
      <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
      <returns>
            The size that this element determines it needs during layout, based on its calculations of child element sizes.
            </returns>
      <requires inheritedFrom="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" inheritedFromTypeName="FrameworkElement" csharp="(!availableSize.IsEmpty ? !IsNaN(availableSize.Width) : !true) &amp;&amp; !IsNaN(availableSize.Height)" vb="(Not availableSize.IsEmpty ? Not IsNaN(availableSize.Width) : Not True) AndAlso Not IsNaN(availableSize.Height)">(!availableSize.IsEmpty ? !double.IsNaN(availableSize.Width) : !true) &amp;&amp; !double.IsNaN(availableSize.Height)</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.ArrangeOverride(System.Windows.Size)">
      <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" /> derived class.
            </summary>
      <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
      <returns>
            The actual size used.
            </returns>
      <requires inheritedFrom="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" inheritedFromTypeName="FrameworkElement" csharp="(!finalSize.IsEmpty ? !IsNaN(finalSize.Width) : !true ? !IsNaN(finalSize.Height) ? !IsPositiveInfinity(finalSize.Width) : !true : !true) &amp;&amp; !IsPositiveInfinity(finalSize.Height)" vb="(Not finalSize.IsEmpty ? Not IsNaN(finalSize.Width) : Not True ? Not IsNaN(finalSize.Height) ? Not IsPositiveInfinity(finalSize.Width) : Not True : Not True) AndAlso Not IsPositiveInfinity(finalSize.Height)">(!finalSize.IsEmpty ? !double.IsNaN(finalSize.Width) : !true ? !double.IsNaN(finalSize.Height) ? !double.IsPositiveInfinity(finalSize.Width) : !true : !true) &amp;&amp; !double.IsPositiveInfinity(finalSize.Height)</requires>
    </member>
    <member name="P:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.WhiteSpaces">
      <summary>
            Gets or sets the white spaces to show.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.WhiteSpaceColor">
      <summary>
            Gets or sets the color of the white space visualization.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.WhiteSpaceOpacity">
      <summary>
            Gets or sets the opacity of the white space visualization.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.Child">
      <summary>
            Gets or sets the inner text box.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.LogicalChildren">
      <summary>
            Gets an enumerator for logical child elements of this element.
            </summary>
    </member>
    <member name="P:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.VisualChildrenCount">
      <summary>
            Gets the number of visual child elements within this element.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.TextValidationEventArgs">
      <summary>
            Event argument for text validation events.
            </summary>
      <invariant>_text != null</invariant>
    </member>
    <member name="M:TomsToolbox.Wpf.TextValidationEventArgs.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.TextValidationEventArgs" /> class.
            </summary>
      <param name="text">The text to validate.</param>
    </member>
    <member name="P:TomsToolbox.Wpf.TextValidationEventArgs.Text">
      <summary>
            Gets the text to validate.
            </summary>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:TomsToolbox.Wpf.TextValidationEventArgs.Action">
      <summary>
            Gets or sets the action to take.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.TextValidationAction">
      <summary>
            The action to be taken after text validation.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.TextValidationAction.None">
      <summary>
            The text is OK, nothing to do.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.TextValidationAction.Error">
      <summary>
            The text contains errors and should be highlighted.
            </summary>
    </member>
    <member name="F:TomsToolbox.Wpf.TextValidationAction.Undo">
      <summary>
            The text contains errors, the last change should be undone.
            </summary>
    </member>
    <member name="T:TomsToolbox.Wpf.VisualExtensions">
      <summary>
            Extension methods to ease usage of <see cref="T:System.Windows.Media.Visual" /> object.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.VisualExtensions.BeginInvoke(System.Windows.Media.Visual,System.Action)">
      <summary>
            Invokes the specified method asynchronously in the dispatcher thread of the visual.
            </summary>
      <param name="visual">The visual.</param>
      <param name="method">The method.</param>
      <returns>The dispatcher operation to track the outcome of the call.</returns>
      <exception cref="T:System.InvalidOperationException">The dispatcher has already shut down.</exception>
      <remarks>
        <see cref="T:System.Windows.Threading.DispatcherObject" /> may have an empty Dispatcher, e.g. for <see cref="T:System.Windows.Freezable" /> objects, 
            thus calling DispatcherObject.Dispatcher.BeginInvoke is considered unsafe. However <see cref="T:System.Windows.Media.Visual" /> objects always 
            have a valid dispatcher, so calling Visual.BeginInvoke via this extension can be considered safe.
            </remarks>
      <requires csharp="visual != null" vb="visual &lt;&gt; Nothing">visual != null</requires>
      <requires csharp="method != null" vb="method &lt;&gt; Nothing">method != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.VisualExtensions.BeginInvoke(System.Windows.Media.Visual,System.Windows.Threading.DispatcherPriority,System.Action)">
      <summary>
            Invokes the specified method asynchronously in the dispatcher thread of the visual.
            </summary>
      <param name="visual">The visual.</param>
      <param name="priority">The priority to use.</param>
      <param name="method">The method.</param>
      <returns>The dispatcher operation to track the outcome of the call.</returns>
      <exception cref="T:System.InvalidOperationException">The dispatcher has already shut down.</exception>
      <remarks>
        <see cref="T:System.Windows.Threading.DispatcherObject" /> may have an empty Dispatcher, e.g. for <see cref="T:System.Windows.Freezable" /> objects, 
            thus calling DispatcherObject.Dispatcher.BeginInvoke is considered unsafe. However <see cref="T:System.Windows.Media.Visual" /> objects always 
            have a valid dispatcher, so calling Visual.BeginInvoke via this extension can be considered safe.
            </remarks>
      <requires csharp="visual != null" vb="visual &lt;&gt; Nothing">visual != null</requires>
      <requires csharp="method != null" vb="method &lt;&gt; Nothing">method != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:TomsToolbox.Wpf.WaitCursor">
      <summary>
            Helper class to ease automatic display of the wait cursor.
            </summary>
    </member>
    <member name="M:TomsToolbox.Wpf.WaitCursor.StartLocal(System.Windows.FrameworkElement)">
      <summary>
            Sets the cursor property of the framework element to the "Wait" cursor and
            automatically resets the cursor to the default cursor when the dispatcher becomes idle again.
            </summary>
      <param name="frameworkElement">The element on which to set the cursor.</param>
      <requires csharp="frameworkElement != null" vb="frameworkElement &lt;&gt; Nothing">frameworkElement != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.WaitCursor.StartLocal(System.Windows.FrameworkElement,System.Windows.Threading.DispatcherPriority)">
      <summary>
            Sets the cursor property of the framework element to the "Wait" cursor and
            automatically resets the cursor to the default cursor when the dispatcher becomes idle again.
            </summary>
      <param name="frameworkElement">The element on which to set the cursor.</param>
      <param name="priority">The dispatcher priority used for waiting.</param>
      <requires csharp="new TomsToolbox.Wpf.WaitCursor.&lt;&gt;c__DisplayClass1(){&#xD;&#xA;    frameworkElement = frameworkElement, &#xD;&#xA;}.frameworkElement != null" vb="(() =&gt; {&#xD;&#xA;    TomsToolbox.Wpf.WaitCursor.&lt;&gt;c__DisplayClass1 local_0_prime = New TomsToolbox.Wpf.WaitCursor.&lt;&gt;c__DisplayClass1();&#xD;&#xA;    (local_0_prime.frameworkElement = frameworkElement)&#xD;&#xA;    return local_0_prime; })().frameworkElement &lt;&gt; Nothing">new TomsToolbox.Wpf.WaitCursor.&lt;&gt;c__DisplayClass1(){
    frameworkElement = frameworkElement, 
}.frameworkElement != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.WaitCursor.Start(System.Windows.FrameworkElement)">
      <summary>
            Sets the cursor property of the framework elements root visual to the "Wait" cursor and 
            automatically resets the cursor to the default cursor when the dispatcher becomes idle again.
            </summary>
      <param name="frameworkElement">An element in the visual tree to start looking for the root visual.</param>
      <remarks>
            The root visual usually is the whole window, except for controls embedded in native or WindowsForms windows.
            </remarks>
      <requires csharp="frameworkElement != null" vb="frameworkElement &lt;&gt; Nothing">frameworkElement != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.WaitCursor.Start(System.Windows.FrameworkElement,System.Windows.Threading.DispatcherPriority)">
      <summary>
            Sets the cursor property of the framework elements root visual to the "Wait" cursor and 
            automatically resets the cursor to the default cursor when the dispatcher becomes idle again.
            </summary>
      <param name="frameworkElement">An element in the visual tree to start looking for the root visual.</param>
      <param name="priority">The dispatcher priority used for waiting.</param>
      <remarks>
            The root visual usually is the whole window, except for controls embedded in native or WindowsForms windows.
            </remarks>
      <requires csharp="frameworkElement != null" vb="frameworkElement &lt;&gt; Nothing">frameworkElement != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.Controls.MapTile.ForceSubLevel(TomsToolbox.Wpf.Controls.IMapTile,System.Windows.Controls.Panel)">
      <requires csharp="tile != null" vb="tile &lt;&gt; Nothing">tile != null</requires>
      <requires csharp="subLevel != null" vb="subLevel &lt;&gt; Nothing">subLevel != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.Controls.MapTile.IsThisTileVisible(System.Windows.Media.Visual,System.Windows.FrameworkElement,System.Windows.Size@)">
      <requires csharp="visual != null" vb="visual &lt;&gt; Nothing">visual != null</requires>
      <requires csharp="viewPort != null" vb="viewPort &lt;&gt; Nothing">viewPort != null</requires>
    </member>
    <member name="P:TomsToolbox.Wpf.Controls.MapTile.SubTiles">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="M:TomsToolbox.Wpf.ImageExtensions.ResourceKey_Changed(System.Windows.Controls.Image,System.Object)">
      <requires csharp="image != null" vb="image &lt;&gt; Nothing">image != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.ImageExtensions.Image_ImageFailed(System.Object,System.Windows.ExceptionRoutedEventArgs)">
      <requires csharp="sender != null" vb="sender &lt;&gt; Nothing">sender != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.MultiSelectorExtensions.SelectionBinding_Changed(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
      <requires csharp="d != null" vb="d &lt;&gt; Nothing">d != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.MultiSelectorExtensions.GetSelectedItems(System.Windows.Controls.Primitives.Selector)">
      <requires csharp="selector != null" vb="selector &lt;&gt; Nothing">selector != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.MultiSelectorExtensions.ScrollIntoView(System.Windows.Controls.Primitives.Selector,System.Object)">
      <requires csharp="selector != null" vb="selector &lt;&gt; Nothing">selector != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.MultiSelectorExtensions.BeginSetFocus(System.Windows.Controls.ItemsControl,System.Object)">
      <requires csharp="new TomsToolbox.Wpf.MultiSelectorExtensions.&lt;&gt;c__DisplayClass7(){&#xD;&#xA;    selector = selector, &#xD;&#xA;    selectedItem = selectedItem, &#xD;&#xA;}.selector != null" vb="(() =&gt; {&#xD;&#xA;    TomsToolbox.Wpf.MultiSelectorExtensions.&lt;&gt;c__DisplayClass7 local_0_prime = New TomsToolbox.Wpf.MultiSelectorExtensions.&lt;&gt;c__DisplayClass7();&#xD;&#xA;    (local_0_prime.selector = selector)&#xD;&#xA;    (local_0_prime.selectedItem = selectedItem)&#xD;&#xA;    return local_0_prime; })().selector &lt;&gt; Nothing">new TomsToolbox.Wpf.MultiSelectorExtensions.&lt;&gt;c__DisplayClass7(){
    selector = selector, 
    selectedItem = selectedItem, 
}.selector != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.MultiSelectorExtensions.ClearSourceSelection(System.Windows.Controls.Primitives.Selector)">
      <requires csharp="selector != null" vb="selector &lt;&gt; Nothing">selector != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.MultiSelectorExtensions.All(System.Collections.IEnumerable,System.Func{System.Object,System.Boolean})">
      <requires csharp="items != null" vb="items &lt;&gt; Nothing">items != null</requires>
      <requires csharp="condition != null" vb="condition &lt;&gt; Nothing">condition != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.MultiSelectorExtensions.SynchronizeWithSource(System.Windows.Controls.Primitives.Selector,System.Collections.IList)">
      <requires csharp="selector != null" vb="selector &lt;&gt; Nothing">selector != null</requires>
      <requires csharp="sourceSelection != null" vb="sourceSelection &lt;&gt; Nothing">sourceSelection != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.MultiSelectorExtensions.AddItemsToSelection(System.Windows.Controls.Primitives.Selector,System.Collections.IList)">
      <requires csharp="selector != null" vb="selector &lt;&gt; Nothing">selector != null</requires>
      <requires csharp="itemsToSelect != null" vb="itemsToSelect &lt;&gt; Nothing">itemsToSelect != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.MultiSelectorExtensions.SelectSingleItem(System.Windows.Controls.Primitives.Selector,System.Collections.IList)">
      <requires csharp="selector != null" vb="selector &lt;&gt; Nothing">selector != null</requires>
      <requires csharp="sourceSelection != null" vb="sourceSelection &lt;&gt; Nothing">sourceSelection != null</requires>
      <requires csharp="sourceSelection.Count == 1" vb="sourceSelection.Count = 1">sourceSelection.Count == 1</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.MultiSelectorExtensions.ArrayCopy(System.Collections.ICollection)">
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:TomsToolbox.Wpf.MultiSelectorExtensions.SelectionSynchronizer">
      <invariant>_selector != null</invariant>
    </member>
    <member name="M:TomsToolbox.Wpf.MultiSelectorExtensions.SelectionSynchronizer.#ctor(System.Windows.Controls.Primitives.Selector,System.Collections.IList)">
      <requires csharp="selector != null" vb="selector &lt;&gt; Nothing">selector != null</requires>
      <requires csharp="sourceSelection != null" vb="sourceSelection &lt;&gt; Nothing">sourceSelection != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.Behaviors.SelectGroupOnGroupHeaderClickBehavior.GroupHeader_OnMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
      <requires csharp="sender != null" vb="sender &lt;&gt; Nothing">sender != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.Behaviors.PopupFocusManagerBehavior.Popup_Opened(System.Object,System.EventArgs)">
      <requires csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        System.Action local_2 = (System.Action)null;&#xD;&#xA;        TomsToolbox.Wpf.Behaviors.PopupFocusManagerBehavior.&lt;&gt;c__DisplayClass4 local_3 = new TomsToolbox.Wpf.Behaviors.PopupFocusManagerBehavior.&lt;&gt;c__DisplayClass4();&#xD;&#xA;    }&#xD;&#xA;    return sender != null; })()" vb="(() =&gt; {&#xD;&#xA;    System.Action local_2 = ((System.Action)Nothing);&#xD;&#xA;    TomsToolbox.Wpf.Behaviors.PopupFocusManagerBehavior.&lt;&gt;c__DisplayClass4 local_3 = New TomsToolbox.Wpf.Behaviors.PopupFocusManagerBehavior.&lt;&gt;c__DisplayClass4();&#xD;&#xA;    return sender &lt;&gt; Nothing; })()">(() =&gt; {
    {
        System.Action local_2 = (System.Action)null;
        TomsToolbox.Wpf.Behaviors.PopupFocusManagerBehavior.&lt;&gt;c__DisplayClass4 local_3 = new TomsToolbox.Wpf.Behaviors.PopupFocusManagerBehavior.&lt;&gt;c__DisplayClass4();
    }
    return sender != null; })()</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.TextBlockHelper.SetIsTextTrimmed(System.Windows.DependencyObject,System.Boolean)">
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <ensures inheritedFrom="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_Model == this.get_Model" vb="result.get_Model = Me.get_Model">result.get_Model == this.get_Model</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.System#Collections#IEnumerable#GetEnumerator">
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_Model == this.get_Model" vb="result.get_Model = Me.get_Model">result.get_Model == this.get_Model</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_CurrentIndex == -1" vb="result.get_CurrentIndex = -1">result.get_CurrentIndex == -1</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <requires inheritedFrom="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" inheritedFromTypeName="ICollection" csharp="array != null" vb="array &lt;&gt; Nothing">array != null</requires>
      <requires inheritedFrom="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" inheritedFromTypeName="ICollection" csharp="array.Rank == 1" vb="array.Rank = 1">array.Rank == 1</requires>
      <requires inheritedFrom="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" inheritedFromTypeName="ICollection" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires inheritedFrom="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" inheritedFromTypeName="ICollection" csharp="index &lt;= array.Length - this.Count" vb="index &lt;= array.Length - Me.Count">index &lt;= array.Length - this.Count</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.Remove(`0)" inheritedFromTypeName="ICollection" csharp="this.Count &lt;= old(this.Count)" vb="Me.Count &lt;= old(Me.Count)">this.Count &lt;= old(this.Count)</ensures>
      <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.Remove(`0)" inheritedFromTypeName="ICollection" csharp="result ⇒ this.Count &gt;= old(this.Count - 1)" vb="result Implies Me.Count &gt;= old(Me.Count - 1)">!result || this.Count &gt;= old(this.Count - 1)</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.System#Collections#ICollection#get_SyncRoot">
      <ensures inheritedFrom="M:System.Collections.ICollection.get_SyncRoot" inheritedFromTypeName="ICollection" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.System#Collections#IList#Add(System.Object)">
      <ensures inheritedFrom="M:System.Collections.IList.Add(System.Object)" inheritedFromTypeName="IList" csharp="result &gt;= -1" vb="result &gt;= -1">result &gt;= -1</ensures>
      <ensures inheritedFrom="M:System.Collections.IList.Add(System.Object)" inheritedFromTypeName="IList" csharp="this.IsSynchronized || result &lt; this.Count" vb="Me.IsSynchronized OrElse result &lt; Me.Count">this.IsSynchronized || result &lt; this.Count</ensures>
      <ensures inheritedFrom="M:System.Collections.IList.Add(System.Object)" inheritedFromTypeName="IList" csharp="this.IsSynchronized || result &lt; 0 &amp;&amp; this.Count == old(this.Count) || this.Count == old(this.Count) + 1" vb="Me.IsSynchronized OrElse result &lt; 0 AndAlso (Me.Count = old(Me.Count)) OrElse Me.Count = old(Me.Count) + 1">this.IsSynchronized || result &lt; 0 &amp;&amp; this.Count == old(this.Count) || this.Count == old(this.Count) + 1</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.Add(`0)" inheritedFromTypeName="ICollection" csharp="this.Count &gt;= old(this.Count)" vb="Me.Count &gt;= old(Me.Count)">this.Count &gt;= old(this.Count)</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.System#Collections#Generic#ICollection{T}#Clear">
      <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.Clear" inheritedFromTypeName="ICollection" csharp="this.Count == 0" vb="Me.Count = 0">this.Count == 0</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <requires inheritedFrom="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" inheritedFromTypeName="ICollection" csharp="array != null" vb="array &lt;&gt; Nothing">array != null</requires>
      <requires inheritedFrom="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" inheritedFromTypeName="ICollection" csharp="arrayIndex &gt;= 0" vb="arrayIndex &gt;= 0">arrayIndex &gt;= 0</requires>
      <requires inheritedFrom="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" inheritedFromTypeName="ICollection" csharp="arrayIndex &lt;= array.Length - this.Count" vb="arrayIndex &lt;= array.Length - Me.Count">arrayIndex &lt;= array.Length - this.Count</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.System#Collections#IList#Clear">
      <ensures inheritedFrom="M:System.Collections.IList.Clear" inheritedFromTypeName="IList" csharp="this.IsSynchronized || this.Count == 0" vb="Me.IsSynchronized OrElse Me.Count = 0">this.IsSynchronized || this.Count == 0</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.System#Collections#IList#IndexOf(System.Object)">
      <ensures inheritedFrom="M:System.Collections.IList.IndexOf(System.Object)" inheritedFromTypeName="IList" csharp="result &gt;= -1" vb="result &gt;= -1">result &gt;= -1</ensures>
      <ensures inheritedFrom="M:System.Collections.IList.IndexOf(System.Object)" inheritedFromTypeName="IList" csharp="this.IsSynchronized || result &lt; this.Count" vb="Me.IsSynchronized OrElse result &lt; Me.Count">this.IsSynchronized || result &lt; this.Count</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <requires inheritedFrom="M:System.Collections.IList.Insert(System.Int32,System.Object)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <requires inheritedFrom="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires inheritedFrom="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)" inheritedFromTypeName="IList" csharp="index &lt;= this.Count" vb="index &lt;= Me.Count">index &lt;= this.Count</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <requires inheritedFrom="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires inheritedFrom="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)" inheritedFromTypeName="IList" csharp="index &lt; this.Count" vb="index &lt; Me.Count">index &lt; this.Count</requires>
      <ensures inheritedFrom="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)" inheritedFromTypeName="IList" csharp="this.Count == old(this.Count) - 1" vb="Me.Count = old(Me.Count) - 1">this.Count == old(this.Count) - 1</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.System#Collections#IList#RemoveAt(System.Int32)">
      <requires inheritedFrom="M:System.Collections.IList.RemoveAt(System.Int32)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires inheritedFrom="M:System.Collections.IList.RemoveAt(System.Int32)" inheritedFromTypeName="IList" csharp="index &lt; this.Count" vb="index &lt; Me.Count">index &lt; this.Count</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.System#Collections#IList#get_Item(System.Int32)">
      <requires inheritedFrom="M:System.Collections.IList.get_Item(System.Int32)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires inheritedFrom="M:System.Collections.IList.get_Item(System.Int32)" inheritedFromTypeName="IList" csharp="index &lt; this.Count" vb="index &lt; Me.Count">index &lt; this.Count</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.System#Collections#IList#set_Item(System.Int32,System.Object)">
      <requires inheritedFrom="M:System.Collections.IList.set_Item(System.Int32,System.Object)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires inheritedFrom="M:System.Collections.IList.set_Item(System.Int32,System.Object)" inheritedFromTypeName="IList" csharp="index &lt; this.Count" vb="index &lt; Me.Count">index &lt; this.Count</requires>
    </member>
    <member name="P:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.System#Collections#ICollection#SyncRoot">
      <getter>
        <ensures inheritedFrom="M:System.Collections.ICollection.get_SyncRoot" inheritedFromTypeName="ICollection" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.System#Collections#IList#Item(System.Int32)">
      <getter>
        <requires inheritedFrom="M:System.Collections.IList.get_Item(System.Int32)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
        <requires inheritedFrom="M:System.Collections.IList.get_Item(System.Int32)" inheritedFromTypeName="IList" csharp="index &lt; this.Count" vb="index &lt; Me.Count">index &lt; this.Count</requires>
      </getter>
      <setter>
        <requires inheritedFrom="M:System.Collections.IList.set_Item(System.Int32,System.Object)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
        <requires inheritedFrom="M:System.Collections.IList.set_Item(System.Int32,System.Object)" inheritedFromTypeName="IList" csharp="index &lt; this.Count" vb="index &lt; Me.Count">index &lt; this.Count</requires>
      </setter>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.ConfirmedCommandConverter.QueryCancelExecution(TomsToolbox.Wpf.Converters.ConfirmedCommandEventArgs)">
      <requires csharp="e != null" vb="e &lt;&gt; Nothing">e != null</requires>
    </member>
    <member name="T:TomsToolbox.Wpf.Converters.ConfirmedCommandConverter.CommandProxy">
      <invariant>_owner != null</invariant>
      <invariant>_command != null</invariant>
    </member>
    <member name="M:TomsToolbox.Wpf.Converters.ConfirmedCommandConverter.CommandProxy.#ctor(TomsToolbox.Wpf.Converters.ConfirmedCommandConverter,System.Windows.Input.ICommand)">
      <requires csharp="owner != null" vb="owner &lt;&gt; Nothing">owner != null</requires>
      <requires csharp="command != null" vb="command &lt;&gt; Nothing">command != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.GetNextAdorner(System.Collections.Generic.IEnumerator{TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.TextAdorner},System.Int32,System.String)">
      <requires csharp="existingAdorners != null" vb="existingAdorners &lt;&gt; Nothing">existingAdorners != null</requires>
    </member>
    <member name="T:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.TextAdorner">
      <invariant>_textBox != null</invariant>
      <invariant>_content != null</invariant>
    </member>
    <member name="M:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.TextAdorner.#ctor(TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator,System.Windows.Controls.TextBox)">
      <requires csharp="owner != null" vb="owner &lt;&gt; Nothing">owner != null</requires>
      <requires csharp="adornedElement != null" vb="adornedElement &lt;&gt; Nothing">adornedElement != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.TextAdorner.MeasureOverride(System.Windows.Size)">
      <requires inheritedFrom="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" inheritedFromTypeName="FrameworkElement" csharp="(!availableSize.IsEmpty ? !IsNaN(availableSize.Width) : !true) &amp;&amp; !IsNaN(availableSize.Height)" vb="(Not availableSize.IsEmpty ? Not IsNaN(availableSize.Width) : Not True) AndAlso Not IsNaN(availableSize.Height)">(!availableSize.IsEmpty ? !double.IsNaN(availableSize.Width) : !true) &amp;&amp; !double.IsNaN(availableSize.Height)</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.TextAdorner.ArrangeOverride(System.Windows.Size)">
      <requires inheritedFrom="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" inheritedFromTypeName="FrameworkElement" csharp="(!finalSize.IsEmpty ? !IsNaN(finalSize.Width) : !true ? !IsNaN(finalSize.Height) ? !IsPositiveInfinity(finalSize.Width) : !true : !true) &amp;&amp; !IsPositiveInfinity(finalSize.Height)" vb="(Not finalSize.IsEmpty ? Not IsNaN(finalSize.Width) : Not True ? Not IsNaN(finalSize.Height) ? Not IsPositiveInfinity(finalSize.Width) : Not True : Not True) AndAlso Not IsPositiveInfinity(finalSize.Height)">(!finalSize.IsEmpty ? !double.IsNaN(finalSize.Width) : !true ? !double.IsNaN(finalSize.Height) ? !double.IsPositiveInfinity(finalSize.Width) : !true : !true) &amp;&amp; !double.IsPositiveInfinity(finalSize.Height)</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.TextAdorner.CreateTransform">
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.ItemsControlCompositionBehavior.ApplyContext(System.Collections.IEnumerable,System.Object)">
      <requires csharp="composables != null" vb="composables &lt;&gt; Nothing">composables != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.ItemsControlCompositionBehavior.AttachSelectables(System.Collections.IEnumerable)">
      <requires csharp="viewModels != null" vb="viewModels &lt;&gt; Nothing">viewModels != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.ContentControlCompositionBehavior.UpdateContent(System.Windows.Controls.ContentControl,System.Object)">
      <requires csharp="contentControl != null" vb="contentControl &lt;&gt; Nothing">contentControl != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.DataTemplateManager.Equals(TomsToolbox.Wpf.Composition.IDataTemplateMetadata,TomsToolbox.Wpf.Composition.IDataTemplateMetadata)">
      <requires csharp="left != null" vb="left &lt;&gt; Nothing">left != null</requires>
      <requires csharp="right != null" vb="right &lt;&gt; Nothing">right != null</requires>
    </member>
    <member name="M:TomsToolbox.Wpf.Composition.DataTemplateManager.GetHashCode(TomsToolbox.Wpf.Composition.IDataTemplateMetadata)">
      <requires csharp="metadata != null" vb="metadata &lt;&gt; Nothing">metadata != null</requires>
    </member>
    <member name="T:TomsToolbox.Wpf.PropertyBinding`1.BindingHelper">
      <invariant>_owner != null</invariant>
    </member>
    <member name="M:TomsToolbox.Wpf.PropertyBinding`1.BindingHelper.#ctor(TomsToolbox.Wpf.PropertyBinding{`0})">
      <requires csharp="owner != null" vb="owner &lt;&gt; Nothing">owner != null</requires>
    </member>
    <member name="T:TomsToolbox.Wpf.SelectorExtensions.WeakKeyIndexer`1">
      <invariant>_items != null</invariant>
    </member>
    <member name="P:TomsToolbox.Wpf.SelectorExtensions.WeakKeyIndexer`1.Item(System.Object)">
      <getter>
        <requires csharp="new TomsToolbox.Wpf.SelectorExtensions.WeakKeyIndexer&lt;T&gt;.&lt;&gt;c__DisplayClass5(){&#xD;&#xA;    key = key, &#xD;&#xA;}.key != null" vb="(() =&gt; {&#xD;&#xA;    TomsToolbox.Wpf.SelectorExtensions.WeakKeyIndexer&lt;T&gt;.&lt;&gt;c__DisplayClass5 local_2_prime = New TomsToolbox.Wpf.SelectorExtensions.WeakKeyIndexer(Of T).&lt;&gt;c__DisplayClass5();&#xD;&#xA;    (local_2_prime.key = key)&#xD;&#xA;    return local_2_prime; })().key &lt;&gt; Nothing">new TomsToolbox.Wpf.SelectorExtensions.WeakKeyIndexer&lt;T&gt;.&lt;&gt;c__DisplayClass5(){
    key = key, 
}.key != null</requires>
      </getter>
    </member>
  </members>
</doc>