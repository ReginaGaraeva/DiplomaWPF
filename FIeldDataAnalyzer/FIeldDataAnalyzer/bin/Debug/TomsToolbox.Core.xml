<?xml version="1.0"?>
<doc>
  <assembly>
    <name>TomsToolbox.Core</name>
  </assembly>
  <members>
    <member name="T:TomsToolbox.Core.AutoWeakIndexer`2">
      <summary>
            A Dictionary like implementation that populates it's content on demand, i.e. calling indexer[key] will never return null.
            The indexer has only weak references to the values, so the values may come and go.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <invariant>_generator != null</invariant>
      <invariant>_items != null</invariant>
    </member>
    <member name="M:TomsToolbox.Core.AutoWeakIndexer`2.#ctor(System.Func{`0,`1})">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Core.AutoWeakIndexer`2" /> class.
            </summary>
      <param name="generator">The generator.</param>
      <requires csharp="generator != null" vb="generator &lt;&gt; Nothing">generator != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.AutoWeakIndexer`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Core.AutoWeakIndexer`2" /> class.
            </summary>
      <param name="generator">The generator.</param>
      <param name="comparer">The comparer.</param>
      <requires csharp="generator != null" vb="generator &lt;&gt; Nothing">generator != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.AutoWeakIndexer`2.TryGetValue(`0,`1@)">
      <summary>
            Gets the value associated with the specified key.
            </summary>
      <returns>
            true if the <see cref="T:TomsToolbox.Core.AutoWeakIndexer`2" /> contains an element with the specified key; otherwise, false.
            </returns>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <requires csharp="!ReferenceEquals((object)key, null)" vb="Not ReferenceEquals(((Object)key), Nothing)">!object.ReferenceEquals((object)key, null)</requires>
    </member>
    <member name="M:TomsToolbox.Core.AutoWeakIndexer`2.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the items of the <see cref="T:TomsToolbox.Core.AutoWeakIndexer`2" />.
            </summary>
      <returns>
            An enumerator for the <see cref="T:TomsToolbox.Core.AutoWeakIndexer`2" />.
            </returns>
      <ensures inheritedFrom="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_Model == this.get_Model" vb="result.get_Model = Me.get_Model">result.get_Model == this.get_Model</ensures>
    </member>
    <member name="M:TomsToolbox.Core.AutoWeakIndexer`2.ContainsKey(`0)">
      <summary>
            Determines whether the <see cref="T:TomsToolbox.Core.AutoWeakIndexer`2" /> contains the specified key.
            </summary>
      <returns>
            true if the <see cref="T:TomsToolbox.Core.AutoWeakIndexer`2" /> contains an element with the specified key; otherwise, false.
            </returns>
      <param name="key">The key to locate in the <see cref="T:TomsToolbox.Core.AutoWeakIndexer`2" />.</param>
      <requires csharp="!ReferenceEquals((object)key, null)" vb="Not ReferenceEquals(((Object)key), Nothing)">!object.ReferenceEquals((object)key, null)</requires>
    </member>
    <member name="M:TomsToolbox.Core.AutoWeakIndexer`2.Clear">
      <summary>
            Removes all keys and values from the <see cref="T:TomsToolbox.Core.AutoWeakIndexer`2" />.
            </summary>
    </member>
    <member name="P:TomsToolbox.Core.AutoWeakIndexer`2.Item(`0)">
      <summary>
            Gets the value associated with the specified key.
            </summary>
      <param name="key">The key of the value to get or set.</param>
      <returns>
            The value associated with the specified key. If the specified key is not found, or the value at the key is null,
            the item generator is called to create a new element with the specified key.
            </returns>
      <exception cref="T:System.InvalidOperationException">The generator did not generate a valid item.</exception>
      <getter>
        <requires csharp="!ReferenceEquals((object)key, null)" vb="Not ReferenceEquals(((Object)key), Nothing)">!object.ReferenceEquals((object)key, null)</requires>
        <ensures csharp="(object)result != null" vb="((Object)result) &lt;&gt; Nothing">(object)result != null</ensures>
      </getter>
    </member>
    <member name="P:TomsToolbox.Core.AutoWeakIndexer`2.Values">
      <summary>
            Gets a collection containing the values in the <see cref="T:TomsToolbox.Core.AutoWeakIndexer`2" />.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:TomsToolbox.Core.AutoWeakIndexer`2" />.
            </returns>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:TomsToolbox.Core.AutoWeakIndexer`2.Keys">
      <summary>
            Gets a collection containing the keys in the <see cref="T:TomsToolbox.Core.AutoWeakIndexer`2" />.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys in the <see cref="T:TomsToolbox.Core.AutoWeakIndexer`2" />.
            </returns>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:TomsToolbox.Core.AutoWeakIndexer`2.Comparer">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> that is used to determine equality of keys for the dictionary.
            </summary>
      <returns>
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface implementation that is used to determine equality of keys for the current <see cref="T:TomsToolbox.Core.AutoWeakIndexer`2" /> and to provide hash values for the keys.
            </returns>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="T:TomsToolbox.Core.CollectionExtensions">
      <summary>
            Extensions methods to ease dealing with collections.
            </summary>
    </member>
    <member name="M:TomsToolbox.Core.CollectionExtensions.SynchronizeWith``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
      <summary>
            Synchronizes the items of the source list with the items of the target list. The order of the items is ignored.
            </summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
      <param name="target">The list to synchronize.</param>
      <param name="source">The items that should be in the target list.</param>
      <requires csharp="target != null" vb="target &lt;&gt; Nothing">target != null</requires>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.CollectionExtensions.SynchronizeWith``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Synchronizes the items of the source list with the items of the target list. The order of the items is ignored.
            </summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
      <param name="target">The list to synchronize.</param>
      <param name="source">The items that should be in the target list.</param>
      <param name="comparer">The comparer used to compare the items. If comparer is <c>null</c>, the default equality comparer is used to compare values.</param>
      <requires csharp="target != null" vb="target &lt;&gt; Nothing">target != null</requires>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.CollectionExtensions.AddRange(System.Collections.IList,System.Collections.IEnumerable)">
      <summary>
            Adds the elements of the specified collection to the end of the list.
            </summary>
      <param name="target">The target list.</param>
      <param name="items">The collection whose elements should be added to the end of the list. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
      <requires csharp="target != null" vb="target &lt;&gt; Nothing">target != null</requires>
      <requires csharp="items != null" vb="items &lt;&gt; Nothing">items != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},``0,``0,``0[])">
      <summary>
            Adds the elements of the specified collection to the end of the list.
            </summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
      <param name="target">The target list.</param>
      <param name="firstItem">The first item to add.</param>
      <param name="secondItem">The second item to add.</param>
      <param name="moreItems">Any more items to add.</param>
      <requires csharp="target != null" vb="target &lt;&gt; Nothing">target != null</requires>
      <requires csharp="moreItems != null" vb="moreItems &lt;&gt; Nothing">moreItems != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Adds the elements of the specified collection to the end of the list.
            </summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
      <param name="target">The target list.</param>
      <param name="items">The collection whose elements should be added to the end of the list. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
      <requires csharp="target != null" vb="target &lt;&gt; Nothing">target != null</requires>
      <requires csharp="items != null" vb="items &lt;&gt; Nothing">items != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.CollectionExtensions.TryAddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Adds the elements of the specified collection to the end of the list, but ignores all <see cref="T:System.ArgumentException" />, e.g. when trying to add duplicate keys to a dictionary.
            </summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
      <param name="target">The target list.</param>
      <param name="items">The collection whose elements should be added to the end of the list. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
      <requires csharp="target != null" vb="target &lt;&gt; Nothing">target != null</requires>
      <requires csharp="items != null" vb="items &lt;&gt; Nothing">items != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.CollectionExtensions.RemoveRange(System.Collections.IList,System.Collections.IEnumerable)">
      <summary>
            Removes a range of elements from the list.
            </summary>
      <param name="target">The target list.</param>
      <param name="items">The items to remove.</param>
      <requires csharp="target != null" vb="target &lt;&gt; Nothing">target != null</requires>
      <requires csharp="items != null" vb="items &lt;&gt; Nothing">items != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.CollectionExtensions.RemoveRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Removes a range of elements from the list.
            </summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
      <param name="target">The target.</param>
      <param name="items">The items to remove.</param>
      <requires csharp="target != null" vb="target &lt;&gt; Nothing">target != null</requires>
      <requires csharp="items != null" vb="items &lt;&gt; Nothing">items != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.CollectionExtensions.RemoveRange``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
      <summary>
            Removes the range of elements from the list that fulfill the condition.
            </summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
      <param name="target">The target.</param>
      <param name="condition">The condition; all items that fulfill this condition will be removed.</param>
      <requires csharp="target != null" vb="target &lt;&gt; Nothing">target != null</requires>
      <requires csharp="condition != null" vb="condition &lt;&gt; Nothing">condition != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.CollectionExtensions.Take``1(System.Collections.Generic.IEnumerator{``0},System.Int32)">
      <summary>
            Retrieves the specified number of items from the source. If source contains less items than specified, all available items are returned.
            </summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
      <param name="source">The source enumerator to retrieve the items from. The enumerator position will be incremented by the number of items returned.</param>
      <param name="numberOfItems">The number of items to retrieve.</param>
      <returns>A list that contains up to n items from the source.</returns>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires csharp="numberOfItems &gt;= 0" vb="numberOfItems &gt;= 0">numberOfItems &gt;= 0</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Core.CollectionExtensions.Trace``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary>
            Helper method to debug LINQ method chains and trace every enumerated item.
            This method is only active in DEBUG configuration, in RELEASE builds it will simply pass through the items.
            </summary>
      <typeparam name="T">The type of objects to trace.</typeparam>
      <param name="items">The items to trace.</param>
      <param name="action">The action to be called for every item enumerated.</param>
      <returns>The items enumerator.</returns>
      <requires csharp="items != null" vb="items &lt;&gt; Nothing">items != null</requires>
      <requires csharp="action != null" vb="action &lt;&gt; Nothing">action != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Core.CollectionExtensions.ContainsAny(System.String,System.Char[])">
      <summary>
            Shortcut to test if any of the given characters is contained in the specified string.
            </summary>
      <param name="self">The string to analyze self.</param>
      <param name="characters">The characters to test for.</param>
      <returns>
        <c>true</c> if any of the characters is contained in the specified string; otherwise <c>false</c>.</returns>
      <requires csharp="self != null" vb="self &lt;&gt; Nothing">self != null</requires>
      <requires csharp="characters != null" vb="characters &lt;&gt; Nothing">characters != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.CollectionExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},``0[])">
      <summary>
            Shortcut to test if any of the given items are contained in the specified object.
            </summary>
      <typeparam name="T">The type of objects.</typeparam>
      <param name="self">The object to analyze.</param>
      <param name="items">The items to test for.</param>
      <returns>
        <c>true</c> if any of the items is contained in the specified object; otherwise <c>false</c>.</returns>
      <requires csharp="self != null" vb="self &lt;&gt; Nothing">self != null</requires>
      <requires csharp="items != null" vb="items &lt;&gt; Nothing">items != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.CollectionExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},``0[])">
      <summary>
            Shortcut to test if any of the given items are contained in the specified object.
            </summary>
      <typeparam name="T">The type of objects.</typeparam>
      <param name="self">The object to analyze.</param>
      <param name="items">The items to test for.</param>
      <param name="comparer">The comparer to compare the individual items.</param>
      <returns>
        <c>true</c> if any of the items is contained in the specified object; otherwise <c>false</c>.</returns>
      <requires csharp="new TomsToolbox.Core.CollectionExtensions.&lt;&gt;c__DisplayClass1&lt;T&gt;(){&#xD;&#xA;    self = self, &#xD;&#xA;    comparer = comparer, &#xD;&#xA;}.self != null" vb="(() =&gt; {&#xD;&#xA;    TomsToolbox.Core.CollectionExtensions.&lt;&gt;c__DisplayClass1&lt;T&gt; local_0_prime = New TomsToolbox.Core.CollectionExtensions.&lt;&gt;c__DisplayClass1(Of T)();&#xD;&#xA;    (local_0_prime.self = self)&#xD;&#xA;    (local_0_prime.comparer = comparer)&#xD;&#xA;    return local_0_prime; })().self &lt;&gt; Nothing">new TomsToolbox.Core.CollectionExtensions.&lt;&gt;c__DisplayClass1&lt;T&gt;(){
    self = self, 
    comparer = comparer, 
}.self != null</requires>
      <requires csharp="items != null" vb="items &lt;&gt; Nothing">items != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.CollectionExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within all items.
            </summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
      <param name="collection">The collection to search.</param>
      <param name="item">The object to locate. The value can be null for reference types.</param>
      <returns>
            The zero-based index of the first occurrence of <paramref name="item" />, if found; otherwise, –1.
            </returns>
      <requires csharp="collection != null" vb="collection &lt;&gt; Nothing">collection != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.CollectionExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within all items.
            </summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
      <param name="collection">The collection to search.</param>
      <param name="item">The object to locate. The value can be null for reference types.</param>
      <param name="comparer">The comparer.</param>
      <returns>
            The zero-based index of the first occurrence of <paramref name="item" />, if found; otherwise, –1.
            </returns>
      <requires csharp="collection != null" vb="collection &lt;&gt; Nothing">collection != null</requires>
      <requires csharp="comparer != null" vb="comparer &lt;&gt; Nothing">comparer != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.CollectionExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary>
            Performs the specified action on each element of the collection.
            </summary>
      <typeparam name="T">The type of elements in the collection.</typeparam>
      <param name="collection">The collection.</param>
      <param name="action">The action.</param>
      <requires csharp="collection != null" vb="collection &lt;&gt; Nothing">collection != null</requires>
      <requires csharp="action != null" vb="action &lt;&gt; Nothing">action != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.CollectionExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
      <summary>
            Performs the specified action on each element of the collection, providing also the index of the item.
            </summary>
      <typeparam name="T">The type of elements in the collection.</typeparam>
      <param name="collection">The collection.</param>
      <param name="action">The action.</param>
      <requires csharp="collection != null" vb="collection &lt;&gt; Nothing">collection != null</requires>
      <requires csharp="action != null" vb="action &lt;&gt; Nothing">action != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.CollectionExtensions.Transpose``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>
            Transposes the specified items, i.e. exchanges key and value.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <param name="items">The items.</param>
      <returns>The transposed items.</returns>
      <requires csharp="items != null" vb="items &lt;&gt; Nothing">items != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Core.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
      <summary>
            Gets the value from the dictionary, or the default value if no item with the specified key exists.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <param name="dictionary">The dictionary.</param>
      <param name="key">The key to lookup.</param>
      <param name="defaultValue">The default value.</param>
      <returns>
            The value from the dictionary, or the default value if no item with the specified key exists.
            </returns>
      <requires csharp="dictionary != null" vb="dictionary &lt;&gt; Nothing">dictionary != null</requires>
      <requires csharp="!ReferenceEquals((object)key, null)" vb="Not ReferenceEquals(((Object)key), Nothing)">!object.ReferenceEquals((object)key, null)</requires>
    </member>
    <member name="M:TomsToolbox.Core.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
      <summary>
            Gets the value from the dictionary, or the default value of <typeparamref name="TValue" /> if no item with the specified key exists.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <param name="dictionary">The dictionary.</param>
      <param name="key">The key to lookup.</param>
      <returns>
            The value from the dictionary, or the default value of <typeparamref name="TValue" /> if no item with the specified key exists.
            </returns>
      <requires csharp="dictionary != null" vb="dictionary &lt;&gt; Nothing">dictionary != null</requires>
      <requires csharp="!ReferenceEquals((object)key, null)" vb="Not ReferenceEquals(((Object)key), Nothing)">!object.ReferenceEquals((object)key, null)</requires>
    </member>
    <member name="M:TomsToolbox.Core.CollectionExtensions.ForceValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
      <summary>
            Gets the value associated with the specified key from the <paramref name="dictionary" />, or creates a new entry if the dictionary does not contain a value associated with the key.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <param name="dictionary">The dictionary.</param>
      <param name="key">The key.</param>
      <param name="generator">The generator function called when a new value needs to be created.</param>
      <returns>The element with the specified key.</returns>
      <requires csharp="dictionary != null" vb="dictionary &lt;&gt; Nothing">dictionary != null</requires>
      <requires csharp="!ReferenceEquals((object)key, null)" vb="Not ReferenceEquals(((Object)key), Nothing)">!object.ReferenceEquals((object)key, null)</requires>
      <requires csharp="generator != null" vb="generator &lt;&gt; Nothing">generator != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.CollectionExtensions.ForceValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
      <summary>
            Gets the value associated with the specified key from the <paramref name="dictionary" />, or creates a new entry if the dictionary does not contain a value associated with the key.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <param name="dictionary">The dictionary.</param>
      <param name="key">The key.</param>
      <param name="defaultValue">The value that will be added to the dictionary if the dictionary does not contain a value associated with the key.</param>
      <returns> The element with the specified key.</returns>
      <requires csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        new TomsToolbox.Core.CollectionExtensions.&lt;&gt;c__DisplayClass6&lt;TKey, TValue&gt;().defaultValue = defaultValue;&#xD;&#xA;    }&#xD;&#xA;    return dictionary != null; })()" vb="(() =&gt; {&#xD;&#xA;    New TomsToolbox.Core.CollectionExtensions.&lt;&gt;c__DisplayClass6(Of TKey, TValue)().defaultValue = defaultValue&#xD;&#xA;    return dictionary &lt;&gt; Nothing; })()">(() =&gt; {
    {
        new TomsToolbox.Core.CollectionExtensions.&lt;&gt;c__DisplayClass6&lt;TKey, TValue&gt;().defaultValue = defaultValue;
    }
    return dictionary != null; })()</requires>
      <requires csharp="!ReferenceEquals((object)key, null)" vb="Not ReferenceEquals(((Object)key), Nothing)">!object.ReferenceEquals((object)key, null)</requires>
    </member>
    <member name="T:TomsToolbox.Core.INotifyChanged">
      <summary>
            Interface implemented by objects that support a generic changed event.
            </summary>
    </member>
    <member name="E:TomsToolbox.Core.INotifyChanged.Changed">
      <summary>
            Occurs when the object has changed.
            </summary>
    </member>
    <member name="T:TomsToolbox.Core.MathExtensions">
      <summary>
            Extension methods for math operations.
            </summary>
    </member>
    <member name="M:TomsToolbox.Core.MathExtensions.Clip(System.Double,System.Double,System.Double)">
      <summary>
            Clips the specified value so it does not exceed min or max.
            </summary>
      <param name="value">The value.</param>
      <param name="minValue">The minimum value.</param>
      <param name="maxValue">The maximum value.</param>
      <returns>The clipped value.</returns>
    </member>
    <member name="M:TomsToolbox.Core.MathExtensions.Clip(System.Single,System.Single,System.Single)">
      <summary>
            Clips the specified value so it does not exceed min or max.
            </summary>
      <param name="value">The value.</param>
      <param name="minValue">The minimum value.</param>
      <param name="maxValue">The maximum value.</param>
      <returns>The clipped value.</returns>
    </member>
    <member name="M:TomsToolbox.Core.MathExtensions.Clip(System.Int32,System.Int32,System.Int32)">
      <summary>
            Clips the specified value so it does not exceed min or max.
            </summary>
      <param name="value">The value.</param>
      <param name="minValue">The minimum value.</param>
      <param name="maxValue">The maximum value.</param>
      <returns>The clipped value.</returns>
    </member>
    <member name="M:TomsToolbox.Core.MathExtensions.Clip(System.Int64,System.Int64,System.Int64)">
      <summary>
            Clips the specified value so it does not exceed min or max.
            </summary>
      <param name="value">The value.</param>
      <param name="minValue">The minimum value.</param>
      <param name="maxValue">The maximum value.</param>
      <returns>The clipped value.</returns>
    </member>
    <member name="T:TomsToolbox.Core.PluginModuleAttribute">
      <summary>
            Denotes an assembly as a loadable module.<para />
            Categories may be assigned to implement dynamic loading of modules by category. 
            </summary>
      <invariant>Categories != null</invariant>
    </member>
    <member name="M:TomsToolbox.Core.PluginModuleAttribute.#ctor(System.String[])">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Core.PluginModuleAttribute" /> class.
            </summary>
      <param name="categories">The categories.</param>
      <requires csharp="categories != null" vb="categories &lt;&gt; Nothing">categories != null</requires>
    </member>
    <member name="P:TomsToolbox.Core.PluginModuleAttribute.Categories">
      <summary>
            Gets the categories for this module.
            </summary>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
      <setter>
        <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      </setter>
    </member>
    <member name="T:TomsToolbox.Core.ObjectExtensions">
      <summary>
            Extensions for any objects.
            </summary>
    </member>
    <member name="M:TomsToolbox.Core.ObjectExtensions.SafeCast``1(System.Object)">
      <summary>
            Performs a cast from object to <typeparamref name="T" />, avoiding possible null violations if <typeparamref name="T" /> is a value type.
            </summary>
      <typeparam name="T">The target type</typeparam>
      <param name="value">The value.</param>
      <returns>The value casted to <typeparamref name="T" />, or <c>default(T)</c> if value is <c>null</c>.</returns>
    </member>
    <member name="T:TomsToolbox.Core.DefaultValue">
      <summary>
            Helper methods to get the default value for a type when the type is only available at runtime.
            </summary>
    </member>
    <member name="M:TomsToolbox.Core.DefaultValue.CreateDefault(System.Type)">
      <summary>
            Creates the default value (C#: default(T)) for the specified type, where the type is only known at runtime.
            </summary>
      <param name="type">The type.</param>
      <returns>The default value.</returns>
      <requires csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
    </member>
    <member name="M:TomsToolbox.Core.DefaultValue.CreateEmpty(System.Type)">
      <summary>
            Create an empty value that is not null for value types or strings. 
            <list type="bullet"><item>Value type: The empty value is the same as the default value (usually 0).</item><item>String: The empty value is an empty string.</item><item>All other reference types: <c>null</c>.</item></list></summary>
      <remarks>
            Useful to initialize boxed nullable fields in data base tables with a not null value.
            </remarks>
      <param name="type">The type.</param>
      <returns>The empty value.</returns>
      <requires csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
    </member>
    <member name="T:TomsToolbox.Core.DelegateComparer`1">
      <summary>
        <see cref="T:System.Collections.Generic.IComparer`1" /> implementation using a delegate function to compare the values.
            </summary>
      <typeparam name="T">The type of objects to compare.</typeparam>
      <invariant>_comparer != null</invariant>
    </member>
    <member name="M:TomsToolbox.Core.DelegateComparer`1.#ctor(System.Func{`0,`0,System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Core.DelegateComparer`1" /> class.
            </summary>
      <param name="comparer">The comparer.</param>
      <requires csharp="comparer != null" vb="comparer &lt;&gt; Nothing">comparer != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.DelegateComparer`1.Compare(`0,`0)">
      <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
      <returns>
            A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero<paramref name="x" /> is less than <paramref name="y" />.Zero<paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.
            </returns>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
    </member>
    <member name="T:TomsToolbox.Core.DelegateEqualityComparer`1">
      <summary>
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation using a delegate function to compare the values.
            </summary>
      <typeparam name="T">The type of objects to compare.</typeparam>
      <invariant>_comparer != null</invariant>
      <invariant>_hashCodeGenerator != null</invariant>
    </member>
    <member name="M:TomsToolbox.Core.DelegateEqualityComparer`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Core.DelegateEqualityComparer`1" /> class,
            using <see cref="M:System.Object.Equals(System.Object,System.Object)" /> and <see cref="M:System.Object.GetHashCode" /></summary>
    </member>
    <member name="M:TomsToolbox.Core.DelegateEqualityComparer`1.#ctor(System.Func{`0,System.Object})">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Core.DelegateEqualityComparer`1" /> class.
            </summary>
      <param name="selector">The selector that selects the object to compare, if e.g. two objects can be compared by a single property.</param>
      <requires csharp="local_2.selector != null" vb="local_2.selector &lt;&gt; Nothing">local_2.selector != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.DelegateEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Core.DelegateEqualityComparer`1" /> class.
            </summary>
      <param name="comparer">The compare function.</param>
      <param name="hashCodeGenerator">The hash code generator.</param>
      <requires csharp="comparer != null" vb="comparer &lt;&gt; Nothing">comparer != null</requires>
      <requires csharp="hashCodeGenerator != null" vb="hashCodeGenerator &lt;&gt; Nothing">hashCodeGenerator != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.DelegateEqualityComparer`1.#ctor(System.Func{`0,System.Object},System.Func{System.Object,System.Object,System.Boolean},System.Func{System.Object,System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Core.DelegateEqualityComparer`1" /> class.
            </summary>
      <param name="selector">The selector that selects the object to compare, if e.g. two objects can be compared by a single property.</param>
      <param name="comparer">The compare function.</param>
      <param name="hashCodeGenerator">The hash code generator.</param>
      <requires csharp="local_2.selector != null" vb="local_2.selector &lt;&gt; Nothing">local_2.selector != null</requires>
      <requires csharp="local_2.comparer != null" vb="local_2.comparer &lt;&gt; Nothing">local_2.comparer != null</requires>
      <requires csharp="local_2.hashCodeGenerator != null" vb="local_2.hashCodeGenerator &lt;&gt; Nothing">local_2.hashCodeGenerator != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.DelegateEqualityComparer`1.Equals(`0,`0)">
      <summary>
            Determines whether the specified objects are equal.
            </summary>
      <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
      <param name="x">The first object of type <typeparamref name="T" /> to compare.</param>
      <param name="y">The second object of type <typeparamref name="T" /> to compare.</param>
    </member>
    <member name="M:TomsToolbox.Core.DelegateEqualityComparer`1.GetHashCode(`0)">
      <summary>
            Returns a hash code for the specified object.
            </summary>
      <returns>
            A hash code for the specified object.
            </returns>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</exception>
    </member>
    <member name="T:TomsToolbox.Core.Disposable">
      <summary>
            Helper methods to ease robust implementation of the IDisposable pattern.
            </summary>
    </member>
    <member name="M:TomsToolbox.Core.Disposable.ReportNotDisposedObject(System.IDisposable)">
      <summary>
            Handle reporting of a not disposed object.<para />
            Using this pattern is a good practice to avoid code where disposable objects get never disposed.<para />
            Calling this method will raise the <see cref="E:TomsToolbox.Core.Disposable.NotDisposedObject" /> event if any event handler is attached; 
            otherwise it will throw an <see cref="T:System.InvalidOperationException" /> if a debugger is attached. 
            If the application does not run in a debugger and no event handler is attached, calling this method does nothing.
            </summary>
      <param name="obj">The object for which to report the missing dispose call.</param>
      <example>
            Implement <see cref="T:System.IDisposable" /> like this:<para /><code language="C#"><![CDATA[
            void Dispose()
            {
                Dispose(true);
                GC.SuppressFinalize(this);
            }
            
            ~MyClass()
            {
                this.ReportNotDisposedObject();
            }
            ]]></code></example>
      <requires csharp="obj != null" vb="obj &lt;&gt; Nothing">obj != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.Disposable.Dispose(System.Object)">
      <summary>
            If the specified object implements <see cref="T:System.IDisposable" />, it will be disposed, else nothing is done.
            </summary>
      <param name="item">The object to dispose.</param>
      <returns>
        <c>true</c> if the object has been disposed.</returns>
    </member>
    <member name="M:TomsToolbox.Core.Disposable.DisposeAll(System.Collections.IEnumerable)">
      <summary>
            Calls <see cref="M:TomsToolbox.Core.Disposable.Dispose(System.Object)" /> for all objects in the list.
            </summary>
      <param name="items">The objects to dispose.</param>
      <returns>
        <c>true</c> if any object has been disposed.</returns>
      <requires csharp="items != null" vb="items &lt;&gt; Nothing">items != null</requires>
    </member>
    <member name="E:TomsToolbox.Core.Disposable.NotDisposedObject">
      <summary>
            Occurs when <see cref="M:TomsToolbox.Core.Disposable.ReportNotDisposedObject(System.IDisposable)" /> has been called, i.e. a not disposed object had been detected. 
            Use this event to do some custom error handling, e.g. logging or throwing an exception.
            The <see cref="P:TomsToolbox.Core.TextEventArgs.Text" /> will contain the name of the class of the object that was not disposed.
            </summary>
    </member>
    <member name="T:TomsToolbox.Core.Enumerate">
      <summary>
            Some enumerators for various scenarios.
            </summary>
    </member>
    <member name="M:TomsToolbox.Core.Enumerate.AsTuples``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
      <summary>
            Enumerates the elements of two enumerations as tuples.
            </summary>
      <typeparam name="T1">The type of the first collection.</typeparam>
      <typeparam name="T2">The type of the second collection.</typeparam>
      <param name="first">The first collection.</param>
      <param name="second">The second collection.</param>
      <returns>Tuples of the elements.</returns>
      <remarks>If the number of elements in each collection is different, the smaller collection determines the number of enumerated items.</remarks>
      <requires csharp="first != null" vb="first &lt;&gt; Nothing">first != null</requires>
      <requires csharp="second != null" vb="second &lt;&gt; Nothing">second != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Core.Enumerate.AsTuples(System.Collections.IEnumerable,System.Collections.IEnumerable)">
      <summary>
            Enumerates the elements of two enumerations as tuples.
            </summary>
      <param name="first">The first collection.</param>
      <param name="second">The second collection.</param>
      <returns>Tuples of the elements.</returns>
      <remarks>If the number of elements in each collection is different, the smaller collection determines the number of enumerated items.</remarks>
      <requires csharp="first != null" vb="first &lt;&gt; Nothing">first != null</requires>
      <requires csharp="second != null" vb="second &lt;&gt; Nothing">second != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:TomsToolbox.Core.EnumExtensions">
      <summary>
            Extension methods to ease dealing with <see cref="T:System.Enum" /> types.
            </summary>
    </member>
    <member name="M:TomsToolbox.Core.EnumExtensions.IsAnyFlagSet``1(``0,``0)">
      <summary>
            Determines whether any of the specified flags is set on the specified value.
            </summary>
      <typeparam name="T">The <see cref="T:System.Enum" /> type.</typeparam>
      <param name="value">The value.</param>
      <param name="flag">The flag.</param>
      <returns>True if any of the specified flags is set.</returns>
    </member>
    <member name="M:TomsToolbox.Core.EnumExtensions.AreAllFlagsSet``1(``0,``0)">
      <summary>
            Determines whether all of the specified flags are set on the specified value.
            </summary>
      <typeparam name="T">The <see cref="T:System.Enum" /> type.</typeparam>
      <param name="value">The value.</param>
      <param name="flag">The flag.</param>
      <returns>True if all of the specified flags are set.</returns>
    </member>
    <member name="M:TomsToolbox.Core.EnumExtensions.GetFlags``1(``0)">
      <summary>
            Gets the individual flags set on the specified value.
            </summary>
      <typeparam name="T">The <see cref="T:System.Enum" /> type.</typeparam>
      <param name="value">The value.</param>
      <returns>The individual flags set on the specified value.</returns>
      <ensures csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        new TomsToolbox.Core.EnumExtensions.&lt;&gt;c__DisplayClass1&lt;T&gt;().value = value;&#xD;&#xA;    }&#xD;&#xA;    return result != null; })()" vb="(() =&gt; {&#xD;&#xA;    New TomsToolbox.Core.EnumExtensions.&lt;&gt;c__DisplayClass1(Of T)().value = value&#xD;&#xA;    return result &lt;&gt; Nothing; })()">(() =&gt; {
    {
        new TomsToolbox.Core.EnumExtensions.&lt;&gt;c__DisplayClass1&lt;T&gt;().value = value;
    }
    return result != null; })()</ensures>
    </member>
    <member name="M:TomsToolbox.Core.EnumExtensions.SetFlags``1(``0,``0,System.Boolean)">
      <summary>
            Sets the specified flags on the specified value on or off.
            </summary>
      <typeparam name="T">The <see cref="T:System.Enum" /> type.</typeparam>
      <param name="value">The value.</param>
      <param name="flags">The flags.</param>
      <param name="on">If set to <c>true</c>, the flags are set, otherwise the flags are cleared.</param>
      <returns>The value with the specified flags set or cleared.</returns>
    </member>
    <member name="M:TomsToolbox.Core.EnumExtensions.SetFlags``1(``0,``0)">
      <summary>
            Sets the specified flags on the specified value.
            </summary>
      <typeparam name="T">The <see cref="T:System.Enum" /> type.</typeparam>
      <param name="value">The value.</param>
      <param name="flags">The flags.</param>
      <returns>The value with the specified flags set.</returns>
    </member>
    <member name="M:TomsToolbox.Core.EnumExtensions.ClearFlags``1(``0,``0)">
      <summary>
            Clears the specified flags on the specified value.
            </summary>
      <typeparam name="T">The <see cref="T:System.Enum" /> type.</typeparam>
      <param name="value">The value.</param>
      <param name="flags">The flags.</param>
      <returns>The value with the specified flags cleared.</returns>
    </member>
    <member name="M:TomsToolbox.Core.EnumExtensions.CombineFlags``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Combines the flags into a single <see cref="T:System.Enum" />.
            </summary>
      <typeparam name="T">The <see cref="T:System.Enum" /> type.</typeparam>
      <param name="flags">The flags.</param>
      <returns>The combined flags.</returns>
      <requires csharp="flags != null" vb="flags &lt;&gt; Nothing">flags != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.EnumExtensions.ToEnum``1(System.Int32)">
      <summary>
            Converts an integer value into an <see cref="T:System.Enum" />.
            </summary>
      <typeparam name="T">The <see cref="T:System.Enum" /> type</typeparam>
      <param name="value">The value.</param>
      <returns>The <see cref="T:System.Enum" /> corresponding to the value. If the value is not valid for the given <see cref="T:System.Enum" />, the default value for the <see cref="T:System.Enum" /> is returned.</returns>
    </member>
    <member name="M:TomsToolbox.Core.EnumExtensions.ToEnum``1(System.UInt32)">
      <summary>
            Converts an unsigned integer value into an <see cref="T:System.Enum" />.
            </summary>
      <typeparam name="T">The <see cref="T:System.Enum" /> type</typeparam>
      <param name="value">The value.</param>
      <returns>The <see cref="T:System.Enum" /> corresponding to the value. If the value is not valid for the given <see cref="T:System.Enum" />, the default value for the <see cref="T:System.Enum" /> is returned.</returns>
    </member>
    <member name="M:TomsToolbox.Core.EnumExtensions.ToEnum``1(System.Int16)">
      <summary>
            Converts a short value into an <see cref="T:System.Enum" />.
            </summary>
      <typeparam name="T">The <see cref="T:System.Enum" /> type</typeparam>
      <param name="value">The value.</param>
      <returns>The <see cref="T:System.Enum" /> corresponding to the value. If the value is not valid for the given <see cref="T:System.Enum" />, the default value for the <see cref="T:System.Enum" /> is returned.</returns>
    </member>
    <member name="M:TomsToolbox.Core.EnumExtensions.ToEnum``1(System.UInt16)">
      <summary>
            Converts an unsigned short value into an <see cref="T:System.Enum" />.
            </summary>
      <typeparam name="T">The <see cref="T:System.Enum" /> type</typeparam>
      <param name="value">The value.</param>
      <returns>The <see cref="T:System.Enum" /> corresponding to the value. If the value is not valid for the given <see cref="T:System.Enum" />, the default value for the <see cref="T:System.Enum" /> is returned.</returns>
    </member>
    <member name="M:TomsToolbox.Core.EnumExtensions.ToEnum``1(System.Int64)">
      <summary>
            Converts a long value into an <see cref="T:System.Enum" />.
            </summary>
      <typeparam name="T">The <see cref="T:System.Enum" /> type</typeparam>
      <param name="value">The value.</param>
      <returns>The <see cref="T:System.Enum" /> corresponding to the value. If the value is not valid for the given <see cref="T:System.Enum" />, the default value for the <see cref="T:System.Enum" /> is returned.</returns>
    </member>
    <member name="M:TomsToolbox.Core.EnumExtensions.ToEnum``1(System.UInt64)">
      <summary>
            Converts an unsigned long value into an <see cref="T:System.Enum" />.
            </summary>
      <typeparam name="T">The <see cref="T:System.Enum" /> type</typeparam>
      <param name="value">The value.</param>
      <returns>The <see cref="T:System.Enum" /> corresponding to the value. If the value is not valid for the given <see cref="T:System.Enum" />, the default value for the <see cref="T:System.Enum" /> is returned.</returns>
    </member>
    <member name="T:TomsToolbox.Core.ExceptionExtensions">
      <summary>
            Extension methods to ease dealing with exceptions.
            </summary>
    </member>
    <member name="M:TomsToolbox.Core.ExceptionExtensions.ExceptionChain(System.Exception)">
      <summary>
            Returns an enumeration of exceptions that contains this exception and all inner exceptions.
            </summary>
      <param name="ex">The exception to start with.</param>
      <returns>The exception and all inner exceptions.</returns>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:TomsToolbox.Core.MaybeExtensions">
      <summary>
            Extension methods for the <see cref="M:TomsToolbox.Core.MaybeExtensions.Maybe``1(``0)" /> monad implementation.
            <see href="http://www.codeproject.com/Articles/109026/Chained-null-checks-and-the-Maybe-monad" /><see href="http://smellegantcode.wordpress.com/2008/12/11/the-maybe-monad-in-c/" /></summary>
    </member>
    <member name="M:TomsToolbox.Core.MaybeExtensions.Maybe``2(``0,System.Func{``0,``1})">
      <summary>
            Generates the Maybe monad for the specified value.
            </summary>
      <typeparam name="TSource">The type of the source.</typeparam>
      <typeparam name="TTarget">The type of the target.</typeparam>
      <param name="value">The value.</param>
      <param name="selector">The selector to get the target from the value.</param>
      <returns>The <see cref="M:TomsToolbox.Core.MaybeExtensions.Maybe``1(``0)" /> with the target as value.</returns>
      <requires csharp="selector != null" vb="selector &lt;&gt; Nothing">selector != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Core.MaybeExtensions.Maybe``1(``0)">
      <summary>
            Generates the Maybe monad for the specified value.
            </summary>
      <typeparam name="TValue">The type of the value.</typeparam>
      <param name="value">The value.</param>
      <returns>The <see cref="M:TomsToolbox.Core.MaybeExtensions.Maybe``1(``0)" /> with the value.</returns>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:TomsToolbox.Core.Maybe`1">
      <summary>
            A Maybe monad implementation.
            <see href="http://www.codeproject.com/Articles/109026/Chained-null-checks-and-the-Maybe-monad" /><see href="http://smellegantcode.wordpress.com/2008/12/11/the-maybe-monad-in-c/" /></summary>
      <typeparam name="T" />
    </member>
    <member name="M:TomsToolbox.Core.Maybe`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Core.Maybe`1" /> class.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:TomsToolbox.Core.Maybe`1.Select``1(System.Func{`0,``0})">
      <summary>
            Returns a new <see cref="T:TomsToolbox.Core.Maybe`1" /> for the target.
            </summary>
      <typeparam name="TTarget">The type of the target.</typeparam>
      <param name="selector">The selector.</param>
      <returns>A new <see cref="T:TomsToolbox.Core.Maybe`1" /> for the target</returns>
      <requires csharp="selector != null" vb="selector &lt;&gt; Nothing">selector != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Core.Maybe`1.Return">
      <summary>
            Returns the inner value if not null, else returns default(T).
            </summary>
      <returns>
            The inner value if not null, else default(T).
            </returns>
    </member>
    <member name="M:TomsToolbox.Core.Maybe`1.Return(`0)">
      <summary>
            Returns the if the inner value if not null, else returns the default value.
            </summary>
      <param name="defaultValue">The default value.</param>
      <returns>
            The inner value if not null, else default(T).
            </returns>
    </member>
    <member name="M:TomsToolbox.Core.Maybe`1.Return``1(System.Func{`0,``0})">
      <summary>
            Returns the value extracted from the specified selector if the inner value is not null, else returns default(TTarget).
            </summary>
      <typeparam name="TTarget">The type of the target.</typeparam>
      <param name="selector">The selector.</param>
      <returns>
            The value extracted from the specified selector if the inner value is not null, else default(TTarget).
            </returns>
      <requires csharp="selector != null" vb="selector &lt;&gt; Nothing">selector != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.Maybe`1.Return``1(System.Func{`0,``0},``0)">
      <summary>
            Returns the value extracted from the specified selector if the inner value is not null, else returns the default value.
            </summary>
      <typeparam name="TTarget">The type of the target.</typeparam>
      <param name="selector">The selector.</param>
      <param name="defaultValue">The default value.</param>
      <returns>
            The value extracted from the specified selector if the inner value is not null, else default(TTarget).
            </returns>
      <requires csharp="selector != null" vb="selector &lt;&gt; Nothing">selector != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.Maybe`1.Do(System.Action{`0})">
      <summary>
            Executes the specified action if the inner value is not null.
            </summary>
      <param name="action">The action.</param>
      <returns>this</returns>
      <requires csharp="action != null" vb="action &lt;&gt; Nothing">action != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Core.Maybe`1.If(System.Func{`0,System.Boolean})">
      <summary>
            Checks the condition and returns an empty Maybe if the condition fails.
            </summary>
      <param name="condition">The condition.</param>
      <returns>this or an empty maybe.</returns>
      <requires csharp="condition != null" vb="condition &lt;&gt; Nothing">condition != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Core.Maybe`1.Unless(System.Func{`0,System.Boolean})">
      <summary>
            Checks the condition and returns an empty Maybe if the condition succeeds.
            </summary>
      <param name="condition">The condition.</param>
      <returns>this or an empty maybe.</returns>
      <requires csharp="condition != null" vb="condition &lt;&gt; Nothing">condition != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:TomsToolbox.Core.PropertySupport">
      <summary>
             Provides support for extracting property information based on a property expression.
            </summary>
    </member>
    <member name="M:TomsToolbox.Core.PropertySupport.ExtractPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
      <summary>
            Extracts the property name from a property expression.
            </summary>
      <typeparam name="TProperty">The property type.</typeparam>
      <param name="propertyExpression">The property expression (e.g. () =&gt; p.PropertyName) to extract the property name from.</param>
      <returns>The name of the property.</returns>
      <exception cref="T:System.ArgumentException">Thrown when the expression is:<br />
                Not a <see cref="T:System.Linq.Expressions.MemberExpression" /><br />
                The <see cref="T:System.Linq.Expressions.MemberExpression" /> does not represent a property.<br /></exception>
      <requires csharp="propertyExpression != null" vb="propertyExpression &lt;&gt; Nothing">propertyExpression != null</requires>
      <ensures csharp="!IsNullOrEmpty(result)" vb="Not IsNullOrEmpty(result)">!string.IsNullOrEmpty(result)</ensures>
    </member>
    <member name="M:TomsToolbox.Core.PropertySupport.TryExtractPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
      <summary>
            Extracts the property name from a property expression.
            </summary>
      <typeparam name="TProperty">The property type.</typeparam>
      <param name="propertyExpression">The property expression (e.g. () =&gt; p.PropertyName) to extract the property name from.</param>
      <returns>The name of the property, or null if the extraction fails.</returns>
      <requires csharp="propertyExpression != null" vb="propertyExpression &lt;&gt; Nothing">propertyExpression != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.PropertySupport.ExtractPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
            Extracts the property name from a property expression.
            </summary>
      <typeparam name="T">The object type containing the property specified in the expression.</typeparam>
      <typeparam name="TProperty">The property type.</typeparam>
      <param name="propertyExpression">The property expression (e.g. p =&gt; p.PropertyName) to extract the property name from.</param>
      <returns>The name of the property.</returns>
      <exception cref="T:System.ArgumentException">Thrown when the expression is:<br />
            Not a <see cref="T:System.Linq.Expressions.MemberExpression" /><br />
            The <see cref="T:System.Linq.Expressions.MemberExpression" /> does not represent a property.<br /></exception>
      <requires csharp="propertyExpression != null" vb="propertyExpression &lt;&gt; Nothing">propertyExpression != null</requires>
      <ensures csharp="!IsNullOrEmpty(result)" vb="Not IsNullOrEmpty(result)">!string.IsNullOrEmpty(result)</ensures>
    </member>
    <member name="M:TomsToolbox.Core.PropertySupport.TryExtractPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
            Extracts the property name from a property expression.
            </summary>
      <typeparam name="T">The object type containing the property specified in the expression.</typeparam>
      <typeparam name="TProperty">The property type.</typeparam>
      <param name="propertyExpression">The property expression (e.g. p =&gt; p.PropertyName) to extract the property name from.</param>
      <returns>The name of the property, or null if the extraction fails.</returns>
      <requires csharp="propertyExpression != null" vb="propertyExpression &lt;&gt; Nothing">propertyExpression != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.PropertySupport.GetEventArgs``1(System.Linq.Expressions.Expression{System.Func{``0}})">
      <summary>
            Gets the <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> for the specified property.
            </summary>
      <typeparam name="T">The object type containing the property specified in the expression.</typeparam>
      <param name="propertyExpression">The property expression (e.g. p =&gt; p.PropertyName) to extract the property name from.</param>
      <returns>The event arguments to pass to <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</returns>
      <exception cref="T:System.ArgumentException">Thrown when the expression is:<br />
                Not a <see cref="T:System.Linq.Expressions.MemberExpression" /><br />
                The <see cref="T:System.Linq.Expressions.MemberExpression" /> does not represent a property.<br /></exception>
      <requires csharp="propertyExpression != null" vb="propertyExpression &lt;&gt; Nothing">propertyExpression != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures csharp="!IsNullOrEmpty(result.PropertyName)" vb="Not IsNullOrEmpty(result.PropertyName)">!string.IsNullOrEmpty(result.PropertyName)</ensures>
    </member>
    <member name="T:TomsToolbox.Core.SequenceAttribute">
      <summary>
            General usable sequence attribute to assign sequences to any object that may need to be e.g. sorted by some means.
            </summary>
    </member>
    <member name="M:TomsToolbox.Core.SequenceAttribute.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Core.SequenceAttribute" /> class.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="P:TomsToolbox.Core.SequenceAttribute.Value">
      <summary>
            Gets the value.
            </summary>
    </member>
    <member name="T:TomsToolbox.Core.TextAttribute">
      <summary>
            Specifies a general usable attribute to associate text with an object, 
            similar to  <see cref="T:System.ComponentModel.DisplayNameAttribute" /> or <see cref="T:System.ComponentModel.DescriptionAttribute" />, but without a predefined usage scope.
            </summary>
    </member>
    <member name="M:TomsToolbox.Core.TextAttribute.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Core.TextAttribute" /> class.
            </summary>
      <param name="key">A user defined key to classify the usage of this text.</param>
    </member>
    <member name="M:TomsToolbox.Core.TextAttribute.#ctor(System.Object,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Core.TextAttribute" /> class.
            </summary>
      <param name="key">A user defined key to classify the usage of this text.</param>
      <param name="text">The text.</param>
    </member>
    <member name="P:TomsToolbox.Core.TextAttribute.Key">
      <summary>
            Gets the key that classifies the usage of this text.
            </summary>
    </member>
    <member name="P:TomsToolbox.Core.TextAttribute.Text">
      <summary>
            Gets the text associated with this attribute.
            </summary>
    </member>
    <member name="P:TomsToolbox.Core.TextAttribute.TextValue">
      <summary>
            Gets or sets the text to be returned by the Text property.
            </summary>
    </member>
    <member name="T:TomsToolbox.Core.TextAttributeExtensions">
      <summary>
            Extension methods to simplify usage of the <see cref="T:TomsToolbox.Core.TextAttribute" /></summary>
    </member>
    <member name="M:TomsToolbox.Core.TextAttributeExtensions.TryGetText(System.Reflection.ICustomAttributeProvider,System.Object)">
      <summary>
            Get the value of the TextAttribute with the specified key that is associated with the given item.
            </summary>
      <param name="item">The item to lookup. This can be a MemberInfo like FieldInfo, PropertyInfo...</param>
      <param name="key">The key.</param>
      <returns>The associated text, or null if the item does not have a text attribute with this key.</returns>
      <requires csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        TomsToolbox.Core.TextAttributeExtensions.&lt;&gt;c__DisplayClass3 local_0 = new TomsToolbox.Core.TextAttributeExtensions.&lt;&gt;c__DisplayClass3();&#xD;&#xA;        local_0.key = key;&#xD;&#xA;    }&#xD;&#xA;    return item != null; })()" vb="(() =&gt; {&#xD;&#xA;    TomsToolbox.Core.TextAttributeExtensions.&lt;&gt;c__DisplayClass3 local_0 = New TomsToolbox.Core.TextAttributeExtensions.&lt;&gt;c__DisplayClass3();&#xD;&#xA;    local_0.key = key&#xD;&#xA;    return item &lt;&gt; Nothing; })()">(() =&gt; {
    {
        TomsToolbox.Core.TextAttributeExtensions.&lt;&gt;c__DisplayClass3 local_0 = new TomsToolbox.Core.TextAttributeExtensions.&lt;&gt;c__DisplayClass3();
        local_0.key = key;
    }
    return item != null; })()</requires>
      <requires csharp="local_0.key != null" vb="local_0.key &lt;&gt; Nothing">local_0.key != null</requires>
    </member>
    <member name="T:TomsToolbox.Core.TextEventArgs">
      <summary>
            Event arguments for events that deal with text, e.g. text changed or text received.
            </summary>
      <invariant>_text != null</invariant>
    </member>
    <member name="M:TomsToolbox.Core.TextEventArgs.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Core.TextEventArgs" /> class.
            </summary>
      <param name="text">The text associated with the event.</param>
      <requires csharp="text != null" vb="text &lt;&gt; Nothing">text != null</requires>
    </member>
    <member name="P:TomsToolbox.Core.TextEventArgs.Text">
      <summary>
            Gets the text associated with the event.
            </summary>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="T:TomsToolbox.Core.TryCastExtension">
      <summary>
            Entry point to create the <see cref="T:TomsToolbox.Core.TryCastWorker`1" />.
            </summary>
    </member>
    <member name="M:TomsToolbox.Core.TryCastExtension.TryCast``1(``0)">
      <summary>
            Creates the <see cref="T:TomsToolbox.Core.TryCastWorker`1" /> object to get a fluent notation for try-casting types.<para />
            This pattern avoids heavily nested if (class is type) / else chains when testing for more than one possible cast.
            </summary>
      <typeparam name="TValue">The type of the value.</typeparam>
      <param name="value">The value.</param>
      <returns>The <see cref="T:TomsToolbox.Core.TryCastWorker`1" /> object.</returns>
      <example>
        <code language="C#"><![CDATA[
            schedule.TryCast()
                .When<SingleSchedule>(x => x.Remove())
                .When<RecurrentSchedule>(x = > x.AddExceptionDate(date))
                .ElseThrow();
            ]]></code>
      </example>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:TomsToolbox.Core.TryCastWorker`1">
      <summary>
            Provide fluent notation for try-casting types.<para />
            Create this object using <see cref="M:TomsToolbox.Core.TryCastExtension.TryCast``1(``0)" /></summary>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="T:TomsToolbox.Core.TryCastWorkerBase`2">
      <summary>
            Provide fluent notation for try-casting types and returning a result.
            </summary>
      <typeparam name="TValue">The type of the value.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:TomsToolbox.Core.TryCastWorkerBase`2.ElseThrow">
      <summary>
            Throws an <see cref="T:System.InvalidOperationException" /> if none of the casts have succeeded.
            </summary>
      <returns>This method never returns, but throws the exception.</returns>
      <exception cref="T:System.InvalidOperationException">Encountered an unexpected type: 'type name'</exception>
    </member>
    <member name="M:TomsToolbox.Core.TryCastWorkerBase`2.ElseThrow(System.String)">
      <summary>
            Throws an <see cref="T:System.InvalidOperationException" /> if none of the casts have succeeded.
            </summary>
      <param name="message">The message of the exception.</param>
      <returns>This method never returns, but throws the exception.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="message" />
      </exception>
    </member>
    <member name="M:TomsToolbox.Core.TryCastWorkerBase`2.TryExecute``1(System.Func{``0,`1})">
      <summary>
            Tries to cast the value and executes the action if the cast was successful.
            </summary>
      <typeparam name="TTarget">The type of the target.</typeparam>
      <param name="action">The action.</param>
      <requires csharp="action != null" vb="action &lt;&gt; Nothing">action != null</requires>
    </member>
    <member name="P:TomsToolbox.Core.TryCastWorkerBase`2.Value">
      <summary>
            Gets the value to cast.
            </summary>
    </member>
    <member name="P:TomsToolbox.Core.TryCastWorkerBase`2.InternalResult">
      <summary>
            Gets the result of the action of the first succeeded cast.
            </summary>
    </member>
    <member name="M:TomsToolbox.Core.TryCastWorker`1.When``1(System.Action{``0})">
      <summary>
            Tries to cast the value to <typeparamref name="TTarget" />; if the cast succeeds, the action is executed.
            </summary>
      <typeparam name="TTarget">The type of the target.</typeparam>
      <param name="action">The action.</param>
      <returns>The object itself to continue with fluent notation.</returns>
      <remarks>
            If any previous method in the fluent chain has already succeeded, this method does nothing.
            </remarks>
      <requires csharp="new TomsToolbox.Core.TryCastWorker&lt;TValue&gt;.&lt;&gt;c__DisplayClass1&lt;TTarget&gt;(){&#xD;&#xA;    action = action, &#xD;&#xA;}.action != null" vb="(() =&gt; {&#xD;&#xA;    TomsToolbox.Core.TryCastWorker&lt;TValue&gt;.&lt;&gt;c__DisplayClass1&lt;TTarget&gt; local_0_prime = New TomsToolbox.Core.TryCastWorker(Of TValue).&lt;&gt;c__DisplayClass1(Of TTarget)();&#xD;&#xA;    (local_0_prime.action = action)&#xD;&#xA;    return local_0_prime; })().action &lt;&gt; Nothing">new TomsToolbox.Core.TryCastWorker&lt;TValue&gt;.&lt;&gt;c__DisplayClass1&lt;TTarget&gt;(){
    action = action, 
}.action != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Core.TryCastWorker`1.Else(System.Action{`0})">
      <summary>
            Executes the action if no previous cast has succeeded.
            </summary>
      <param name="action">The action.</param>
      <requires csharp="new TomsToolbox.Core.TryCastWorker&lt;TValue&gt;.&lt;&gt;c__DisplayClass4(){&#xD;&#xA;    action = action, &#xD;&#xA;}.action != null" vb="(() =&gt; {&#xD;&#xA;    TomsToolbox.Core.TryCastWorker&lt;TValue&gt;.&lt;&gt;c__DisplayClass4 local_0_prime = New TomsToolbox.Core.TryCastWorker(Of TValue).&lt;&gt;c__DisplayClass4();&#xD;&#xA;    (local_0_prime.action = action)&#xD;&#xA;    return local_0_prime; })().action &lt;&gt; Nothing">new TomsToolbox.Core.TryCastWorker&lt;TValue&gt;.&lt;&gt;c__DisplayClass4(){
    action = action, 
}.action != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.TryCastWorker`1.Returning``1">
      <summary>
            Adds a return value to the fluent chain.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <returns>The <see cref="T:TomsToolbox.Core.TryCastWorker`2" /> object.</returns>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Core.TryCastWorker`1.Returning``1(``0)">
      <summary>
            Adds a return value to the fluent chain.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="defaultValue">The default value of the result if no cast succeeds.</param>
      <returns>
            The <see cref="T:TomsToolbox.Core.TryCastWorker`2" /> object.
            </returns>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Core.TryCastWorker`1.WrapAction``1(System.Action{``0},``0)">
      <summary>
            Wraps the action so it can be used where a function is expected.
            </summary>
      <requires csharp="action != null" vb="action &lt;&gt; Nothing">action != null</requires>
    </member>
    <member name="T:TomsToolbox.Core.TryCastWorker`2">
      <summary>
            Provide fluent notation for try-casting types and returning a result.<para />
            Create this object using <see cref="M:TomsToolbox.Core.TryCastWorker`1.Returning``1" /></summary>
      <typeparam name="TValue">The type of the value.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:TomsToolbox.Core.TryCastWorker`2.When``1(System.Func{``0,`1})">
      <summary>
            Tries to cast the value to <typeparamref name="TTarget" />; if the cast succeeds, the action is executed and the result is stored in the <see cref="P:TomsToolbox.Core.TryCastWorker`2.Result" /> property.
            </summary>
      <typeparam name="TTarget">The type of the target.</typeparam>
      <param name="action">The action.</param>
      <returns>The object itself to continue with fluent notation.</returns>
      <remarks>
            If any previous method in the fluent chain has already succeeded, this method does nothing.
            </remarks>
      <requires csharp="action != null" vb="action &lt;&gt; Nothing">action != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Core.TryCastWorker`2.Else(System.Func{`0,`1})">
      <summary>
            Executes the action and returns the result if no previous cast has succeeded.
            </summary>
      <param name="action">The action.</param>
      <returns>The result.</returns>
      <requires csharp="action != null" vb="action &lt;&gt; Nothing">action != null</requires>
    </member>
    <member name="P:TomsToolbox.Core.TryCastWorker`2.Result">
      <summary>
            Gets the result of the action of the first succeeded cast.
            </summary>
    </member>
    <member name="T:TomsToolbox.Core.TypeConverterSupport">
      <summary>
            Some functions to ease use of type converters.
            </summary>
    </member>
    <member name="M:TomsToolbox.Core.TypeConverterSupport.GetCustomTypeConverter(System.Reflection.ICustomAttributeProvider)">
      <summary>
            Gets the custom <see cref="T:System.ComponentModel.TypeConverter" /> for the specified object.
            </summary>
      <param name="type">The type.</param>
      <returns>
            The custom type converter, or null if the type has no custom type converter
            </returns>
      <requires csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.TypeConverterSupport.GetTypeConverter(System.Reflection.PropertyInfo)">
      <summary>
            Gets the type converter for the property.
            </summary>
      <param name="propertyInfo">The property information.</param>
      <returns>The custom or default type converter.</returns>
      <requires csharp="propertyInfo != (System.Reflection.PropertyInfo)null" vb="propertyInfo &lt;&gt; ((System.Reflection.PropertyInfo)Nothing) ">propertyInfo != (System.Reflection.PropertyInfo)null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:TomsToolbox.Core.IWeakEventListener">
      <summary>
            Common interface for weak event listener.
            </summary>
    </member>
    <member name="M:TomsToolbox.Core.IWeakEventListener.Detach">
      <summary>
            Detaches from the subscribed event.
            </summary>
    </member>
    <member name="T:TomsToolbox.Core.WeakEventListener`3">
      <summary>
            Implements a weak event listener that allows the owner to be garbage
            collected if its only remaining link is an event handler.
            </summary>
      <typeparam name="TTarget">Type of the target instance listening for the event.</typeparam>
      <typeparam name="TSource">Type of source instance for the event.</typeparam>
      <typeparam name="TEventArgs">Type of event arguments for the event.</typeparam>
      <invariant>_weakTarget != null</invariant>
      <invariant>(_source != null) || (_weakSource != null)</invariant>
      <invariant>_onEventAction != null</invariant>
      <invariant>_onDetachAction != null</invariant>
    </member>
    <member name="F:TomsToolbox.Core.WeakEventListener`3._weakTarget">
      <summary>
            WeakReference to the object listening for the event.
            </summary>
    </member>
    <member name="F:TomsToolbox.Core.WeakEventListener`3._weakSource">
      <summary>
            To hold only a reference to source object. With this instance the WeakEventListener
            can guarantee that the handler gets unregistered when listener is released but does not reference the source.
            </summary>
    </member>
    <member name="F:TomsToolbox.Core.WeakEventListener`3._source">
      <summary>
            To hold a reference to source object. With this instance the WeakEventListener
            can guarantee that the handler gets unregistered when listener is released.
            </summary>
    </member>
    <member name="F:TomsToolbox.Core.WeakEventListener`3._onEventAction">
      <summary>
            Delegate to the method to call when the event fires.
            </summary>
    </member>
    <member name="F:TomsToolbox.Core.WeakEventListener`3._onDetachAction">
      <summary>
            Delegate to the method to call when detaching from the event.
            </summary>
    </member>
    <member name="M:TomsToolbox.Core.WeakEventListener`3.#ctor(`0,`1,System.Action{`0,System.Object,`2},System.Action{TomsToolbox.Core.WeakEventListener{`0,`1,`2},`1},System.Action{TomsToolbox.Core.WeakEventListener{`0,`1,`2},`1})">
      <summary>
            Initializes a new instances of the WeakEventListener class that references the source but not the target.
            </summary>
      <param name="target">Instance subscribing to the event. The instance will not be referenced.</param>
      <param name="source">Instance providing the event. The instance will be referenced.</param>
      <param name="onEventAction">The static method to call when a event is received.</param>
      <param name="onAttachAction">The static action to attach to the event(s).</param>
      <param name="onDetachAction">The static action to detach from the event(s).</param>
      <requires csharp="(object)target != null" vb="((Object)target) &lt;&gt; Nothing">(object)target != null</requires>
      <requires csharp="(object)source != null" vb="((Object)source) &lt;&gt; Nothing">(object)source != null</requires>
      <requires csharp="onEventAction != null" vb="onEventAction &lt;&gt; Nothing">onEventAction != null</requires>
      <requires csharp="onAttachAction != null" vb="onAttachAction &lt;&gt; Nothing">onAttachAction != null</requires>
      <requires csharp="onDetachAction != null" vb="onDetachAction &lt;&gt; Nothing">onDetachAction != null</requires>
      <requires description="Method must be static, otherwise the event WeakEventListner class does not prevent memory leaks." csharp="onEventAction.Method.IsStatic" vb="onEventAction.Method.IsStatic">onEventAction.Method.IsStatic</requires>
      <requires description="Method must be static, otherwise the event WeakEventListner class does not prevent memory leaks." csharp="onAttachAction.Method.IsStatic" vb="onAttachAction.Method.IsStatic">onAttachAction.Method.IsStatic</requires>
      <requires description="Method must be static, otherwise the event WeakEventListner class does not prevent memory leaks." csharp="onDetachAction.Method.IsStatic" vb="onDetachAction.Method.IsStatic">onDetachAction.Method.IsStatic</requires>
    </member>
    <member name="M:TomsToolbox.Core.WeakEventListener`3.#ctor(`0,TomsToolbox.Core.WeakReference{`1},System.Action{`0,System.Object,`2},System.Action{TomsToolbox.Core.WeakEventListener{`0,`1,`2},`1},System.Action{TomsToolbox.Core.WeakEventListener{`0,`1,`2},`1})">
      <summary>
            Initializes a new instances of the WeakEventListener class that does not reference both source and target.
            </summary>
      <param name="target">Instance subscribing to the event. The instance will not be referenced.</param>
      <param name="source">Weak reference to the instance providing the event. When using this constructor the source will not be referenced, too.</param>
      <param name="onEventAction">The static method to call when a event is received.</param>
      <param name="onAttachAction">The static action to attach to the event(s).</param>
      <param name="onDetachAction">The static action to detach from the event(s).</param>
      <requires csharp="(object)target != null" vb="((Object)target) &lt;&gt; Nothing">(object)target != null</requires>
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires csharp="onEventAction != null" vb="onEventAction &lt;&gt; Nothing">onEventAction != null</requires>
      <requires csharp="onAttachAction != null" vb="onAttachAction &lt;&gt; Nothing">onAttachAction != null</requires>
      <requires csharp="onDetachAction != null" vb="onDetachAction &lt;&gt; Nothing">onDetachAction != null</requires>
      <requires description="Method must be static, otherwise the event WeakEventListner class does not prevent memory leaks." csharp="onEventAction.Method.IsStatic" vb="onEventAction.Method.IsStatic">onEventAction.Method.IsStatic</requires>
      <requires description="Method must be static, otherwise the event WeakEventListner class does not prevent memory leaks." csharp="onAttachAction.Method.IsStatic" vb="onAttachAction.Method.IsStatic">onAttachAction.Method.IsStatic</requires>
      <requires description="Method must be static, otherwise the event WeakEventListner class does not prevent memory leaks." csharp="onDetachAction.Method.IsStatic" vb="onDetachAction.Method.IsStatic">onDetachAction.Method.IsStatic</requires>
    </member>
    <member name="M:TomsToolbox.Core.WeakEventListener`3.OnEvent(System.Object,`2)">
      <summary>
            Handler for the subscribed event calls OnEventAction to handle it.
            </summary>
      <param name="source">Event source.</param>
      <param name="eventArgs">Event arguments.</param>
    </member>
    <member name="M:TomsToolbox.Core.WeakEventListener`3.Detach">
      <summary>
            Detaches from the subscribed event.
            </summary>
    </member>
    <member name="T:TomsToolbox.Core.WeakReference`1">
      <summary>
            A typed version of the <see cref="T:System.WeakReference" /></summary>
      <typeparam name="T">The type of the object that is tracked.</typeparam>
    </member>
    <member name="M:TomsToolbox.Core.WeakReference`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Core.WeakReference`1" /> class.
            </summary>
      <param name="target">An object to track.</param>
    </member>
    <member name="M:TomsToolbox.Core.WeakReference`1.#ctor(`0,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Core.WeakReference`1" /> class.
            </summary>
      <param name="target"> An object to track.</param>
      <param name="trackResurrection">Indicates when to stop tracking the object. If true, the object is tracked after finalization; if false, the object is only tracked until finalization.</param>
    </member>
    <member name="M:TomsToolbox.Core.WeakReference`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Core.WeakReference`1" /> class.
            </summary>
      <param name="info">An object that holds all the data needed to serialize or deserialize the current <see cref="T:System.WeakReference" /> object.</param>
      <param name="context">(Reserved) Describes the source and destination of the serialized stream specified by <paramref name="info" />.</param>
    </member>
    <member name="M:TomsToolbox.Core.WeakReference`1.TryGetTarget(`0@)">
      <summary>
            Tries to the get the target.
            </summary>
      <param name="target">The target.</param>
      <returns>True if target is valid.</returns>
      <ensures csharp="result ⇒ (object)target != null" vb="result Implies ((Object)target) &lt;&gt; Nothing">!result || (object)target != null</ensures>
    </member>
    <member name="P:TomsToolbox.Core.WeakReference`1.Target">
      <summary>
            Gets or sets the object (the target) referenced by the current <see cref="T:System.WeakReference" /> object.
            </summary>
      <returns>null if the object referenced by the current <see cref="T:System.WeakReference" /> object has been garbage collected; otherwise, a reference to the object referenced by the current <see cref="T:System.WeakReference" /> object.</returns>
    </member>
    <member name="T:TomsToolbox.Core.WeakReferenceSet`1">
      <summary>
            A simple set of weak references.
            </summary>
      <typeparam name="T">The type of the referenced objects.</typeparam>
      <invariant>_items != null</invariant>
    </member>
    <member name="M:TomsToolbox.Core.WeakReferenceSet`1.Add(`0)">
      <summary>
            Adds the specified element to the set.
            </summary>
      <param name="item">The item to add.</param>
      <returns>
        <c>true</c> if the element is added to the WeakReferenceSet{T} object; <c>false</c> if the element is already present.
            </returns>
    </member>
    <member name="M:TomsToolbox.Core.WeakReferenceSet`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the alive items of the collection.
            </summary>
      <returns>
            A System.Collections.Generic.IEnumerator{T} that can be used to iterate through the collection.
            </returns>
      <ensures inheritedFrom="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_Model == this.get_Model" vb="result.get_Model = Me.get_Model">result.get_Model == this.get_Model</ensures>
    </member>
    <member name="T:TomsToolbox.Core.WebHelper">
      <summary>
            Helper for web methods.
            </summary>
    </member>
    <member name="M:TomsToolbox.Core.WebHelper.CreateHttpWebRequest(System.Uri)">
      <summary>
            Creates an HTTP web request with the system proxy settings.
            </summary>
      <param name="uri">The URI.</param>
      <returns>The request.</returns>
      <requires csharp="uri != (System.Uri)null" vb="uri &lt;&gt; ((System.Uri)Nothing) ">uri != (System.Uri)null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Core.WebHelper.Download(System.Uri)">
      <summary>
            Downloads the data from the specified URI using a GET request.
            </summary>
      <param name="uri">The URI.</param>
      <returns>A stream containing the downloaded data.</returns>
      <requires csharp="uri != (System.Uri)null" vb="uri &lt;&gt; ((System.Uri)Nothing) ">uri != (System.Uri)null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:TomsToolbox.Core.PropertySupport.ExtractPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)">
      <requires csharp="propertyExpression != null" vb="propertyExpression &lt;&gt; Nothing">propertyExpression != null</requires>
      <ensures csharp="failOnErrors ⇒ !IsNullOrEmpty(result)" vb="failOnErrors Implies Not IsNullOrEmpty(result)">!failOnErrors || !string.IsNullOrEmpty(result)</ensures>
    </member>
    <member name="M:TomsToolbox.Core.PropertySupport.ExtractPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
      <requires csharp="propertyExpression != null" vb="propertyExpression &lt;&gt; Nothing">propertyExpression != null</requires>
      <ensures csharp="failOnErrors ⇒ !IsNullOrEmpty(result)" vb="failOnErrors Implies Not IsNullOrEmpty(result)">!failOnErrors || !string.IsNullOrEmpty(result)</ensures>
    </member>
    <member name="M:TomsToolbox.Core.PropertySupport.HandleError(System.Boolean,System.String)">
      <requires csharp="errorMessage != null" vb="errorMessage &lt;&gt; Nothing">errorMessage != null</requires>
      <ensures csharp="failOnErrors ⇒ !IsNullOrEmpty(result)" vb="failOnErrors Implies Not IsNullOrEmpty(result)">!failOnErrors || !string.IsNullOrEmpty(result)</ensures>
    </member>
    <member name="M:TomsToolbox.Core.WeakReferenceSet`1.System#Collections#IEnumerable#GetEnumerator">
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_Model == this.get_Model" vb="result.get_Model = Me.get_Model">result.get_Model == this.get_Model</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_CurrentIndex == -1" vb="result.get_CurrentIndex = -1">result.get_CurrentIndex == -1</ensures>
    </member>
    <member name="M:TomsToolbox.Core.AutoWeakIndexer`2.System#Collections#IEnumerable#GetEnumerator">
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_Model == this.get_Model" vb="result.get_Model = Me.get_Model">result.get_Model == this.get_Model</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_CurrentIndex == -1" vb="result.get_CurrentIndex = -1">result.get_CurrentIndex == -1</ensures>
    </member>
    <member name="M:TomsToolbox.Core.INotifyChanged.add_Changed(System.EventHandler)">
      <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
    </member>
    <member name="M:TomsToolbox.Core.INotifyChanged.remove_Changed(System.EventHandler)">
      <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
    </member>
  </members>
</doc>